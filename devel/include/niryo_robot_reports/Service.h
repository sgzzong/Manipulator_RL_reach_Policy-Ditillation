// Generated by gencpp from file niryo_robot_reports/Service.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_REPORTS_MESSAGE_SERVICE_H
#define NIRYO_ROBOT_REPORTS_MESSAGE_SERVICE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_reports
{
template <class ContainerAllocator>
struct Service_
{
  typedef Service_<ContainerAllocator> Type;

  Service_()
    : to_test(0)  {
    }
  Service_(const ContainerAllocator& _alloc)
    : to_test(0)  {
  (void)_alloc;
    }



   typedef int8_t _to_test_type;
  _to_test_type to_test;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DAILY_REPORTS)
  #undef DAILY_REPORTS
#endif
#if defined(_WIN32) && defined(TEST_REPORTS)
  #undef TEST_REPORTS
#endif
#if defined(_WIN32) && defined(ALERT_REPORTS)
  #undef ALERT_REPORTS
#endif
#if defined(_WIN32) && defined(AUTO_DIAGNOSIS_REPORTS)
  #undef AUTO_DIAGNOSIS_REPORTS
#endif

  enum {
    DAILY_REPORTS = 0,
    TEST_REPORTS = 1,
    ALERT_REPORTS = 2,
    AUTO_DIAGNOSIS_REPORTS = 3,
  };


  typedef boost::shared_ptr< ::niryo_robot_reports::Service_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_reports::Service_<ContainerAllocator> const> ConstPtr;

}; // struct Service_

typedef ::niryo_robot_reports::Service_<std::allocator<void> > Service;

typedef boost::shared_ptr< ::niryo_robot_reports::Service > ServicePtr;
typedef boost::shared_ptr< ::niryo_robot_reports::Service const> ServiceConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_reports::Service_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_reports::Service_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_reports::Service_<ContainerAllocator1> & lhs, const ::niryo_robot_reports::Service_<ContainerAllocator2> & rhs)
{
  return lhs.to_test == rhs.to_test;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_reports::Service_<ContainerAllocator1> & lhs, const ::niryo_robot_reports::Service_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_reports

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_reports::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_reports::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_reports::Service_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_reports::Service_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_reports::Service_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_reports::Service_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_reports::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2398aef25e17f178de798f7c32631bee";
  }

  static const char* value(const ::niryo_robot_reports::Service_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2398aef25e17f178ULL;
  static const uint64_t static_value2 = 0xde798f7c32631beeULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_reports::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_reports/Service";
  }

  static const char* value(const ::niryo_robot_reports::Service_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_reports::Service_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 DAILY_REPORTS = 0\n"
"int8 TEST_REPORTS = 1\n"
"int8 ALERT_REPORTS = 2\n"
"int8 AUTO_DIAGNOSIS_REPORTS = 3\n"
"\n"
"int8 to_test\n"
;
  }

  static const char* value(const ::niryo_robot_reports::Service_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_reports::Service_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.to_test);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Service_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_reports::Service_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_reports::Service_<ContainerAllocator>& v)
  {
    s << indent << "to_test: ";
    Printer<int8_t>::stream(s, indent + "  ", v.to_test);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_REPORTS_MESSAGE_SERVICE_H
