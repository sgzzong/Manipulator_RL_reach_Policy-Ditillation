// Generated by gencpp from file niryo_robot_led_ring/LedUserRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_LED_RING_MESSAGE_LEDUSERREQUEST_H
#define NIRYO_ROBOT_LED_RING_MESSAGE_LEDUSERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_led_ring/LedRingAnimation.h>
#include <std_msgs/ColorRGBA.h>

namespace niryo_robot_led_ring
{
template <class ContainerAllocator>
struct LedUserRequest_
{
  typedef LedUserRequest_<ContainerAllocator> Type;

  LedUserRequest_()
    : animation_mode()
    , colors()
    , period(0.0)
    , iterations(0)
    , wait_end(false)  {
    }
  LedUserRequest_(const ContainerAllocator& _alloc)
    : animation_mode(_alloc)
    , colors(_alloc)
    , period(0.0)
    , iterations(0)
    , wait_end(false)  {
  (void)_alloc;
    }



   typedef  ::niryo_robot_led_ring::LedRingAnimation_<ContainerAllocator>  _animation_mode_type;
  _animation_mode_type animation_mode;

   typedef std::vector< ::std_msgs::ColorRGBA_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::ColorRGBA_<ContainerAllocator> >> _colors_type;
  _colors_type colors;

   typedef double _period_type;
  _period_type period;

   typedef int16_t _iterations_type;
  _iterations_type iterations;

   typedef uint8_t _wait_end_type;
  _wait_end_type wait_end;





  typedef boost::shared_ptr< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedUserRequest_

typedef ::niryo_robot_led_ring::LedUserRequest_<std::allocator<void> > LedUserRequest;

typedef boost::shared_ptr< ::niryo_robot_led_ring::LedUserRequest > LedUserRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_led_ring::LedUserRequest const> LedUserRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator2> & rhs)
{
  return lhs.animation_mode == rhs.animation_mode &&
    lhs.colors == rhs.colors &&
    lhs.period == rhs.period &&
    lhs.iterations == rhs.iterations &&
    lhs.wait_end == rhs.wait_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_led_ring

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "15fd4f22b9dd479ce9c37b5525710c0d";
  }

  static const char* value(const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x15fd4f22b9dd479cULL;
  static const uint64_t static_value2 = 0xe9c37b5525710c0dULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_led_ring/LedUserRequest";
  }

  static const char* value(const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_led_ring/LedRingAnimation animation_mode\n"
"\n"
"std_msgs/ColorRGBA[] colors\n"
"float64 period         # Time of 1 iteration in seconds\n"
"int16 iterations\n"
"\n"
"# The service either wait for the iterations to finish to answer, \n"
"# or answer immediatly a Success after launching the function of Led Ring control. \n"
"# if iterations is 0, answer immediatly in any case, because the function never\n"
"# stops.\n"
"bool wait_end\n"
"\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_led_ring/LedRingAnimation\n"
"int32 NONE = -1\n"
"int32 SOLID = 1\n"
"int32 FLASHING = 2   \n"
"int32 ALTERNATE = 3  \n"
"int32 CHASE = 4       \n"
"int32 COLOR_WIPE = 5   \n"
"int32 RAINBOW = 6\n"
"int32 RAINBOW_CYLE = 7\n"
"int32 RAINBOW_CHASE = 8\n"
"int32 GO_UP = 9\n"
"int32 GO_UP_AND_DOWN = 10\n"
"int32 BREATH = 11\n"
"int32 SNAKE = 12\n"
"int32 CUSTOM = 13\n"
"\n"
"int32 animation\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.animation_mode);
      stream.next(m.colors);
      stream.next(m.period);
      stream.next(m.iterations);
      stream.next(m.wait_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedUserRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_led_ring::LedUserRequest_<ContainerAllocator>& v)
  {
    s << indent << "animation_mode: ";
    s << std::endl;
    Printer< ::niryo_robot_led_ring::LedRingAnimation_<ContainerAllocator> >::stream(s, indent + "  ", v.animation_mode);
    s << indent << "colors[]" << std::endl;
    for (size_t i = 0; i < v.colors.size(); ++i)
    {
      s << indent << "  colors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "    ", v.colors[i]);
    }
    s << indent << "period: ";
    Printer<double>::stream(s, indent + "  ", v.period);
    s << indent << "iterations: ";
    Printer<int16_t>::stream(s, indent + "  ", v.iterations);
    s << indent << "wait_end: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wait_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_LED_RING_MESSAGE_LEDUSERREQUEST_H
