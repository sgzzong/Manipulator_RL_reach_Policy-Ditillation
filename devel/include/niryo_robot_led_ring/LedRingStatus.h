// Generated by gencpp from file niryo_robot_led_ring/LedRingStatus.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_LED_RING_MESSAGE_LEDRINGSTATUS_H
#define NIRYO_ROBOT_LED_RING_MESSAGE_LEDRINGSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_led_ring/LedRingAnimation.h>
#include <std_msgs/ColorRGBA.h>

namespace niryo_robot_led_ring
{
template <class ContainerAllocator>
struct LedRingStatus_
{
  typedef LedRingStatus_<ContainerAllocator> Type;

  LedRingStatus_()
    : led_mode(0)
    , animation_mode()
    , animation_color()  {
    }
  LedRingStatus_(const ContainerAllocator& _alloc)
    : led_mode(0)
    , animation_mode(_alloc)
    , animation_color(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _led_mode_type;
  _led_mode_type led_mode;

   typedef  ::niryo_robot_led_ring::LedRingAnimation_<ContainerAllocator>  _animation_mode_type;
  _animation_mode_type animation_mode;

   typedef  ::std_msgs::ColorRGBA_<ContainerAllocator>  _animation_color_type;
  _animation_color_type animation_color;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ROBOT_STATUS)
  #undef ROBOT_STATUS
#endif
#if defined(_WIN32) && defined(USER)
  #undef USER
#endif

  enum {
    ROBOT_STATUS = 1,
    USER = 2,
  };


  typedef boost::shared_ptr< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> const> ConstPtr;

}; // struct LedRingStatus_

typedef ::niryo_robot_led_ring::LedRingStatus_<std::allocator<void> > LedRingStatus;

typedef boost::shared_ptr< ::niryo_robot_led_ring::LedRingStatus > LedRingStatusPtr;
typedef boost::shared_ptr< ::niryo_robot_led_ring::LedRingStatus const> LedRingStatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator1> & lhs, const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator2> & rhs)
{
  return lhs.led_mode == rhs.led_mode &&
    lhs.animation_mode == rhs.animation_mode &&
    lhs.animation_color == rhs.animation_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator1> & lhs, const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_led_ring

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8451a2850ab998f7e23e7fb04868d7d0";
  }

  static const char* value(const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8451a2850ab998f7ULL;
  static const uint64_t static_value2 = 0xe23e7fb04868d7d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_led_ring/LedRingStatus";
  }

  static const char* value(const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ROBOT_STATUS = 1\n"
"int32 USER = 2\n"
"\n"
"int32 led_mode\n"
"\n"
"niryo_robot_led_ring/LedRingAnimation animation_mode\n"
"\n"
"std_msgs/ColorRGBA animation_color # except for rainbow related animation\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_led_ring/LedRingAnimation\n"
"int32 NONE = -1\n"
"int32 SOLID = 1\n"
"int32 FLASHING = 2   \n"
"int32 ALTERNATE = 3  \n"
"int32 CHASE = 4       \n"
"int32 COLOR_WIPE = 5   \n"
"int32 RAINBOW = 6\n"
"int32 RAINBOW_CYLE = 7\n"
"int32 RAINBOW_CHASE = 8\n"
"int32 GO_UP = 9\n"
"int32 GO_UP_AND_DOWN = 10\n"
"int32 BREATH = 11\n"
"int32 SNAKE = 12\n"
"int32 CUSTOM = 13\n"
"\n"
"int32 animation\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
;
  }

  static const char* value(const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.led_mode);
      stream.next(m.animation_mode);
      stream.next(m.animation_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedRingStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_led_ring::LedRingStatus_<ContainerAllocator>& v)
  {
    s << indent << "led_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.led_mode);
    s << indent << "animation_mode: ";
    s << std::endl;
    Printer< ::niryo_robot_led_ring::LedRingAnimation_<ContainerAllocator> >::stream(s, indent + "  ", v.animation_mode);
    s << indent << "animation_color: ";
    s << std::endl;
    Printer< ::std_msgs::ColorRGBA_<ContainerAllocator> >::stream(s, indent + "  ", v.animation_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_LED_RING_MESSAGE_LEDRINGSTATUS_H
