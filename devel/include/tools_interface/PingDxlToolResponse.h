// Generated by gencpp from file tools_interface/PingDxlToolResponse.msg
// DO NOT EDIT!


#ifndef TOOLS_INTERFACE_MESSAGE_PINGDXLTOOLRESPONSE_H
#define TOOLS_INTERFACE_MESSAGE_PINGDXLTOOLRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tools_interface/Tool.h>

namespace tools_interface
{
template <class ContainerAllocator>
struct PingDxlToolResponse_
{
  typedef PingDxlToolResponse_<ContainerAllocator> Type;

  PingDxlToolResponse_()
    : state(0)
    , tool()  {
    }
  PingDxlToolResponse_(const ContainerAllocator& _alloc)
    : state(0)
    , tool(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _state_type;
  _state_type state;

   typedef  ::tools_interface::Tool_<ContainerAllocator>  _tool_type;
  _tool_type tool;





  typedef boost::shared_ptr< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PingDxlToolResponse_

typedef ::tools_interface::PingDxlToolResponse_<std::allocator<void> > PingDxlToolResponse;

typedef boost::shared_ptr< ::tools_interface::PingDxlToolResponse > PingDxlToolResponsePtr;
typedef boost::shared_ptr< ::tools_interface::PingDxlToolResponse const> PingDxlToolResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tools_interface::PingDxlToolResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tools_interface::PingDxlToolResponse_<ContainerAllocator1> & lhs, const ::tools_interface::PingDxlToolResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.tool == rhs.tool;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tools_interface::PingDxlToolResponse_<ContainerAllocator1> & lhs, const ::tools_interface::PingDxlToolResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tools_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79430720584434ee5ae66073bc65cdba";
  }

  static const char* value(const ::tools_interface::PingDxlToolResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79430720584434eeULL;
  static const uint64_t static_value2 = 0x5ae66073bc65cdbaULL;
};

template<class ContainerAllocator>
struct DataType< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tools_interface/PingDxlToolResponse";
  }

  static const char* value(const ::tools_interface::PingDxlToolResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 state\n"
"tools_interface/Tool tool\n"
"\n"
"\n"
"================================================================================\n"
"MSG: tools_interface/Tool\n"
"int8 id\n"
"\n"
"int8 NO_MOTOR = 0\n"
"int8 STEPPER = 1\n"
"int8 XL430 = 2\n"
"int8 XL320 = 3\n"
"int8 XL330 = 4\n"
"int8 XC430 = 5\n"
"int8 XM430 = 6\n"
"int8 FAKE_DXL_MOTOR = 20\n"
"\n"
"int8 motor_type\n"
"\n"
"int16 position\n"
"\n"
"int8 TOOL_STATE_PING_OK       = 1\n"
"int8 TOOL_STATE_PING_ERROR    = 2\n"
"int8 TOOL_STATE_WRONG_ID      = 3\n"
"int8 TOOL_STATE_TIMEOUT       = 4\n"
"\n"
"int8 GRIPPER_STATE_OPEN       = 16\n"
"int8 GRIPPER_STATE_CLOSE      = 17\n"
"\n"
"int8 VACUUM_PUMP_STATE_PULLED = 32\n"
"int8 VACUUM_PUMP_STATE_PUSHED = 33\n"
"\n"
"int8 state\n"
;
  }

  static const char* value(const ::tools_interface::PingDxlToolResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.tool);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PingDxlToolResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tools_interface::PingDxlToolResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tools_interface::PingDxlToolResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    s << indent << "tool: ";
    s << std::endl;
    Printer< ::tools_interface::Tool_<ContainerAllocator> >::stream(s, indent + "  ", v.tool);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TOOLS_INTERFACE_MESSAGE_PINGDXLTOOLRESPONSE_H
