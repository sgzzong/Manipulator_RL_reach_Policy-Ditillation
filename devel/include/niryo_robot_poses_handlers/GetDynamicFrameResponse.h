// Generated by gencpp from file niryo_robot_poses_handlers/GetDynamicFrameResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_POSES_HANDLERS_MESSAGE_GETDYNAMICFRAMERESPONSE_H
#define NIRYO_ROBOT_POSES_HANDLERS_MESSAGE_GETDYNAMICFRAMERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_poses_handlers/DynamicFrame.h>

namespace niryo_robot_poses_handlers
{
template <class ContainerAllocator>
struct GetDynamicFrameResponse_
{
  typedef GetDynamicFrameResponse_<ContainerAllocator> Type;

  GetDynamicFrameResponse_()
    : status(0)
    , message()
    , dynamic_frame()  {
    }
  GetDynamicFrameResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , message(_alloc)
    , dynamic_frame(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef  ::niryo_robot_poses_handlers::DynamicFrame_<ContainerAllocator>  _dynamic_frame_type;
  _dynamic_frame_type dynamic_frame;





  typedef boost::shared_ptr< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDynamicFrameResponse_

typedef ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<std::allocator<void> > GetDynamicFrameResponse;

typedef boost::shared_ptr< ::niryo_robot_poses_handlers::GetDynamicFrameResponse > GetDynamicFrameResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_poses_handlers::GetDynamicFrameResponse const> GetDynamicFrameResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.message == rhs.message &&
    lhs.dynamic_frame == rhs.dynamic_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_poses_handlers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acd0ab2038caf467e95a481785df5a5e";
  }

  static const char* value(const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacd0ab2038caf467ULL;
  static const uint64_t static_value2 = 0xe95a481785df5a5eULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_poses_handlers/GetDynamicFrameResponse";
  }

  static const char* value(const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n"
"string message\n"
"niryo_robot_poses_handlers/DynamicFrame dynamic_frame\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_poses_handlers/DynamicFrame\n"
"string name # maximum lenght of dynamic_frame's name is 30 characters\n"
"string new_name\n"
"string description\n"
"bool belong_to_workspace\n"
"\n"
"geometry_msgs/Point position\n"
"niryo_robot_msgs/RPY rpy\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"geometry_msgs/Point[] points\n"
"niryo_robot_msgs/RobotState[] poses\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/RPY\n"
"# roll, pitch and yaw\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/RobotState\n"
"geometry_msgs/Point position\n"
"niryo_robot_msgs/RPY rpy\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"geometry_msgs/Twist twist\n"
"float64 tcp_speed\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.message);
      stream.next(m.dynamic_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDynamicFrameResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_poses_handlers::GetDynamicFrameResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "dynamic_frame: ";
    s << std::endl;
    Printer< ::niryo_robot_poses_handlers::DynamicFrame_<ContainerAllocator> >::stream(s, indent + "  ", v.dynamic_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_POSES_HANDLERS_MESSAGE_GETDYNAMICFRAMERESPONSE_H
