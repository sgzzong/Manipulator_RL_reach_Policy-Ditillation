// Generated by gencpp from file niryo_robot_programs_manager/GetProgramListRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTREQUEST_H
#define NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_programs_manager/ProgramLanguage.h>

namespace niryo_robot_programs_manager
{
template <class ContainerAllocator>
struct GetProgramListRequest_
{
  typedef GetProgramListRequest_<ContainerAllocator> Type;

  GetProgramListRequest_()
    : language()  {
    }
  GetProgramListRequest_(const ContainerAllocator& _alloc)
    : language(_alloc)  {
  (void)_alloc;
    }



   typedef  ::niryo_robot_programs_manager::ProgramLanguage_<ContainerAllocator>  _language_type;
  _language_type language;





  typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GetProgramListRequest_

typedef ::niryo_robot_programs_manager::GetProgramListRequest_<std::allocator<void> > GetProgramListRequest;

typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListRequest > GetProgramListRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListRequest const> GetProgramListRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator2> & rhs)
{
  return lhs.language == rhs.language;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_programs_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5e97d3a53eb75daa8a9dc33fecbe922";
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5e97d3a53eb75daULL;
  static const uint64_t static_value2 = 0xa8a9dc33fecbe922ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/GetProgramListRequest";
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/ProgramLanguage language\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_programs_manager/ProgramLanguage\n"
"int8 NONE = -1\n"
"\n"
"int8 ALL = 0\n"
"\n"
"# Runnable\n"
"int8 PYTHON2 = 1\n"
"int8 PYTHON3 = 2\n"
"\n"
"# Not Runnable\n"
"int8 BLOCKLY = 66\n"
"\n"
"int8 used\n"
;
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.language);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetProgramListRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_programs_manager::GetProgramListRequest_<ContainerAllocator>& v)
  {
    s << indent << "language: ";
    s << std::endl;
    Printer< ::niryo_robot_programs_manager::ProgramLanguage_<ContainerAllocator> >::stream(s, indent + "  ", v.language);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTREQUEST_H
