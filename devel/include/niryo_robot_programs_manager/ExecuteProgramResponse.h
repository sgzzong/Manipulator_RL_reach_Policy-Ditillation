// Generated by gencpp from file niryo_robot_programs_manager/ExecuteProgramResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMRESPONSE_H
#define NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_programs_manager
{
template <class ContainerAllocator>
struct ExecuteProgramResponse_
{
  typedef ExecuteProgramResponse_<ContainerAllocator> Type;

  ExecuteProgramResponse_()
    : status(0)
    , message()
    , output()  {
    }
  ExecuteProgramResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , message(_alloc)
    , output(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _output_type;
  _output_type output;





  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteProgramResponse_

typedef ::niryo_robot_programs_manager::ExecuteProgramResponse_<std::allocator<void> > ExecuteProgramResponse;

typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramResponse > ExecuteProgramResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramResponse const> ExecuteProgramResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.message == rhs.message &&
    lhs.output == rhs.output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_programs_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "512868926003b7ebaa1fe22fc7ddcfa2";
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x512868926003b7ebULL;
  static const uint64_t static_value2 = 0xaa1fe22fc7ddcfa2ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/ExecuteProgramResponse";
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 status\n"
"string message\n"
"string output\n"
;
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.message);
      stream.next(m.output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteProgramResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_programs_manager::ExecuteProgramResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int16_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "output: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMRESPONSE_H
