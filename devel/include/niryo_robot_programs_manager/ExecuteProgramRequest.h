// Generated by gencpp from file niryo_robot_programs_manager/ExecuteProgramRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMREQUEST_H
#define NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_programs_manager/ProgramLanguage.h>

namespace niryo_robot_programs_manager
{
template <class ContainerAllocator>
struct ExecuteProgramRequest_
{
  typedef ExecuteProgramRequest_<ContainerAllocator> Type;

  ExecuteProgramRequest_()
    : execute_from_string(false)
    , name()
    , code_string()
    , language()  {
    }
  ExecuteProgramRequest_(const ContainerAllocator& _alloc)
    : execute_from_string(false)
    , name(_alloc)
    , code_string(_alloc)
    , language(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _execute_from_string_type;
  _execute_from_string_type execute_from_string;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _code_string_type;
  _code_string_type code_string;

   typedef  ::niryo_robot_programs_manager::ProgramLanguage_<ContainerAllocator>  _language_type;
  _language_type language;





  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteProgramRequest_

typedef ::niryo_robot_programs_manager::ExecuteProgramRequest_<std::allocator<void> > ExecuteProgramRequest;

typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramRequest > ExecuteProgramRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_programs_manager::ExecuteProgramRequest const> ExecuteProgramRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator2> & rhs)
{
  return lhs.execute_from_string == rhs.execute_from_string &&
    lhs.name == rhs.name &&
    lhs.code_string == rhs.code_string &&
    lhs.language == rhs.language;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_programs_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "397bed7b6ffc6aec5456827939d1e131";
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x397bed7b6ffc6aecULL;
  static const uint64_t static_value2 = 0x5456827939d1e131ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/ExecuteProgramRequest";
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool execute_from_string\n"
"\n"
"string name\n"
"string code_string\n"
"\n"
"niryo_robot_programs_manager/ProgramLanguage language\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_programs_manager/ProgramLanguage\n"
"int8 NONE = -1\n"
"\n"
"int8 ALL = 0\n"
"\n"
"# Runnable\n"
"int8 PYTHON2 = 1\n"
"int8 PYTHON3 = 2\n"
"\n"
"# Not Runnable\n"
"int8 BLOCKLY = 66\n"
"\n"
"int8 used\n"
;
  }

  static const char* value(const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.execute_from_string);
      stream.next(m.name);
      stream.next(m.code_string);
      stream.next(m.language);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteProgramRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_programs_manager::ExecuteProgramRequest_<ContainerAllocator>& v)
  {
    s << indent << "execute_from_string: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.execute_from_string);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "code_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.code_string);
    s << indent << "language: ";
    s << std::endl;
    Printer< ::niryo_robot_programs_manager::ProgramLanguage_<ContainerAllocator> >::stream(s, indent + "  ", v.language);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_EXECUTEPROGRAMREQUEST_H
