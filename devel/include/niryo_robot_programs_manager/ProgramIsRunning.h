// Generated by gencpp from file niryo_robot_programs_manager/ProgramIsRunning.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_PROGRAMISRUNNING_H
#define NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_PROGRAMISRUNNING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_programs_manager
{
template <class ContainerAllocator>
struct ProgramIsRunning_
{
  typedef ProgramIsRunning_<ContainerAllocator> Type;

  ProgramIsRunning_()
    : program_is_running(false)
    , last_execution_status(0)
    , last_execution_msg()  {
    }
  ProgramIsRunning_(const ContainerAllocator& _alloc)
    : program_is_running(false)
    , last_execution_status(0)
    , last_execution_msg(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _program_is_running_type;
  _program_is_running_type program_is_running;

   typedef int8_t _last_execution_status_type;
  _last_execution_status_type last_execution_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _last_execution_msg_type;
  _last_execution_msg_type last_execution_msg;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(EXECUTION_ERROR)
  #undef EXECUTION_ERROR
#endif
#if defined(_WIN32) && defined(FILE_ERROR)
  #undef FILE_ERROR
#endif
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(PREEMPTED)
  #undef PREEMPTED
#endif
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif

  enum {
    EXECUTION_ERROR = -2,
    FILE_ERROR = -1,
    NONE = 0,
    PREEMPTED = 1,
    SUCCESS = 2,
  };


  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> const> ConstPtr;

}; // struct ProgramIsRunning_

typedef ::niryo_robot_programs_manager::ProgramIsRunning_<std::allocator<void> > ProgramIsRunning;

typedef boost::shared_ptr< ::niryo_robot_programs_manager::ProgramIsRunning > ProgramIsRunningPtr;
typedef boost::shared_ptr< ::niryo_robot_programs_manager::ProgramIsRunning const> ProgramIsRunningConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator2> & rhs)
{
  return lhs.program_is_running == rhs.program_is_running &&
    lhs.last_execution_status == rhs.last_execution_status &&
    lhs.last_execution_msg == rhs.last_execution_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_programs_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66c2fadf0a0e8cb9f5b6407bff6f9fb1";
  }

  static const char* value(const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66c2fadf0a0e8cb9ULL;
  static const uint64_t static_value2 = 0xf5b6407bff6f9fb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/ProgramIsRunning";
  }

  static const char* value(const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool program_is_running\n"
"\n"
"int8 EXECUTION_ERROR = -2\n"
"int8 FILE_ERROR = -1\n"
"int8 NONE = 0\n"
"int8 PREEMPTED = 1\n"
"int8 SUCCESS = 2\n"
"\n"
"int8 last_execution_status\n"
"string last_execution_msg\n"
;
  }

  static const char* value(const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.program_is_running);
      stream.next(m.last_execution_status);
      stream.next(m.last_execution_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProgramIsRunning_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_programs_manager::ProgramIsRunning_<ContainerAllocator>& v)
  {
    s << indent << "program_is_running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.program_is_running);
    s << indent << "last_execution_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.last_execution_status);
    s << indent << "last_execution_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.last_execution_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_PROGRAMISRUNNING_H
