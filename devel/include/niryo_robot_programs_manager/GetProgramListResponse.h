// Generated by gencpp from file niryo_robot_programs_manager/GetProgramListResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTRESPONSE_H
#define NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_programs_manager/ProgramLanguageList.h>

namespace niryo_robot_programs_manager
{
template <class ContainerAllocator>
struct GetProgramListResponse_
{
  typedef GetProgramListResponse_<ContainerAllocator> Type;

  GetProgramListResponse_()
    : programs_names()
    , list_of_language_list()
    , programs_description()  {
    }
  GetProgramListResponse_(const ContainerAllocator& _alloc)
    : programs_names(_alloc)
    , list_of_language_list(_alloc)
    , programs_description(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _programs_names_type;
  _programs_names_type programs_names;

   typedef std::vector< ::niryo_robot_programs_manager::ProgramLanguageList_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_programs_manager::ProgramLanguageList_<ContainerAllocator> >> _list_of_language_list_type;
  _list_of_language_list_type list_of_language_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _programs_description_type;
  _programs_description_type programs_description;





  typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetProgramListResponse_

typedef ::niryo_robot_programs_manager::GetProgramListResponse_<std::allocator<void> > GetProgramListResponse;

typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListResponse > GetProgramListResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_programs_manager::GetProgramListResponse const> GetProgramListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.programs_names == rhs.programs_names &&
    lhs.list_of_language_list == rhs.list_of_language_list &&
    lhs.programs_description == rhs.programs_description;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_programs_manager

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2eeab6a7fdb2c21404eeccc7eb573f85";
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2eeab6a7fdb2c214ULL;
  static const uint64_t static_value2 = 0x04eeccc7eb573f85ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_programs_manager/GetProgramListResponse";
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] programs_names\n"
"niryo_robot_programs_manager/ProgramLanguageList[] list_of_language_list\n"
"string[] programs_description\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_programs_manager/ProgramLanguageList\n"
"niryo_robot_programs_manager/ProgramLanguage[] language_list\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_programs_manager/ProgramLanguage\n"
"int8 NONE = -1\n"
"\n"
"int8 ALL = 0\n"
"\n"
"# Runnable\n"
"int8 PYTHON2 = 1\n"
"int8 PYTHON3 = 2\n"
"\n"
"# Not Runnable\n"
"int8 BLOCKLY = 66\n"
"\n"
"int8 used\n"
;
  }

  static const char* value(const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.programs_names);
      stream.next(m.list_of_language_list);
      stream.next(m.programs_description);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetProgramListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_programs_manager::GetProgramListResponse_<ContainerAllocator>& v)
  {
    s << indent << "programs_names[]" << std::endl;
    for (size_t i = 0; i < v.programs_names.size(); ++i)
    {
      s << indent << "  programs_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.programs_names[i]);
    }
    s << indent << "list_of_language_list[]" << std::endl;
    for (size_t i = 0; i < v.list_of_language_list.size(); ++i)
    {
      s << indent << "  list_of_language_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_programs_manager::ProgramLanguageList_<ContainerAllocator> >::stream(s, indent + "    ", v.list_of_language_list[i]);
    }
    s << indent << "programs_description[]" << std::endl;
    for (size_t i = 0; i < v.programs_description.size(); ++i)
    {
      s << indent << "  programs_description[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.programs_description[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_PROGRAMS_MANAGER_MESSAGE_GETPROGRAMLISTRESPONSE_H
