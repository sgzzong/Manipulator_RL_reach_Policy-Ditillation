// Generated by gencpp from file niryo_robot_system_api_client/ManageWifiRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_SYSTEM_API_CLIENT_MESSAGE_MANAGEWIFIREQUEST_H
#define NIRYO_ROBOT_SYSTEM_API_CLIENT_MESSAGE_MANAGEWIFIREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_system_api_client
{
template <class ContainerAllocator>
struct ManageWifiRequest_
{
  typedef ManageWifiRequest_<ContainerAllocator> Type;

  ManageWifiRequest_()
    : cmd(0)  {
    }
  ManageWifiRequest_(const ContainerAllocator& _alloc)
    : cmd(0)  {
  (void)_alloc;
    }



   typedef int8_t _cmd_type;
  _cmd_type cmd;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HOTSPOT)
  #undef HOTSPOT
#endif
#if defined(_WIN32) && defined(RESTART)
  #undef RESTART
#endif
#if defined(_WIN32) && defined(DEACTIVATE)
  #undef DEACTIVATE
#endif
#if defined(_WIN32) && defined(RECONNECT)
  #undef RECONNECT
#endif

  enum {
    HOTSPOT = 0,
    RESTART = 1,
    DEACTIVATE = 2,
    RECONNECT = 3,
  };


  typedef boost::shared_ptr< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManageWifiRequest_

typedef ::niryo_robot_system_api_client::ManageWifiRequest_<std::allocator<void> > ManageWifiRequest;

typedef boost::shared_ptr< ::niryo_robot_system_api_client::ManageWifiRequest > ManageWifiRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_system_api_client::ManageWifiRequest const> ManageWifiRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_system_api_client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0c356925ffa2584579a8ed01abfc197f";
  }

  static const char* value(const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0c356925ffa25845ULL;
  static const uint64_t static_value2 = 0x79a8ed01abfc197fULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_system_api_client/ManageWifiRequest";
  }

  static const char* value(const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 HOTSPOT = 0\n"
"int8 RESTART = 1\n"
"int8 DEACTIVATE = 2\n"
"int8 RECONNECT = 3\n"
"\n"
"int8 cmd\n"
;
  }

  static const char* value(const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManageWifiRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_system_api_client::ManageWifiRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_SYSTEM_API_CLIENT_MESSAGE_MANAGEWIFIREQUEST_H
