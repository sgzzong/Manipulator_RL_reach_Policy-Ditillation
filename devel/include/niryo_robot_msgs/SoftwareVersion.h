// Generated by gencpp from file niryo_robot_msgs/SoftwareVersion.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_MSGS_MESSAGE_SOFTWAREVERSION_H
#define NIRYO_ROBOT_MSGS_MESSAGE_SOFTWAREVERSION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_msgs
{
template <class ContainerAllocator>
struct SoftwareVersion_
{
  typedef SoftwareVersion_<ContainerAllocator> Type;

  SoftwareVersion_()
    : rpi_image_version()
    , ros_niryo_robot_version()
    , robot_version()
    , motor_names()
    , stepper_firmware_versions()  {
    }
  SoftwareVersion_(const ContainerAllocator& _alloc)
    : rpi_image_version(_alloc)
    , ros_niryo_robot_version(_alloc)
    , robot_version(_alloc)
    , motor_names(_alloc)
    , stepper_firmware_versions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _rpi_image_version_type;
  _rpi_image_version_type rpi_image_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ros_niryo_robot_version_type;
  _ros_niryo_robot_version_type ros_niryo_robot_version;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_version_type;
  _robot_version_type robot_version;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _motor_names_type;
  _motor_names_type motor_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _stepper_firmware_versions_type;
  _stepper_firmware_versions_type stepper_firmware_versions;





  typedef boost::shared_ptr< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> const> ConstPtr;

}; // struct SoftwareVersion_

typedef ::niryo_robot_msgs::SoftwareVersion_<std::allocator<void> > SoftwareVersion;

typedef boost::shared_ptr< ::niryo_robot_msgs::SoftwareVersion > SoftwareVersionPtr;
typedef boost::shared_ptr< ::niryo_robot_msgs::SoftwareVersion const> SoftwareVersionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator2> & rhs)
{
  return lhs.rpi_image_version == rhs.rpi_image_version &&
    lhs.ros_niryo_robot_version == rhs.ros_niryo_robot_version &&
    lhs.robot_version == rhs.robot_version &&
    lhs.motor_names == rhs.motor_names &&
    lhs.stepper_firmware_versions == rhs.stepper_firmware_versions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6d753e36564fa618802ffe450e4bbdd2";
  }

  static const char* value(const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6d753e36564fa618ULL;
  static const uint64_t static_value2 = 0x802ffe450e4bbdd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/SoftwareVersion";
  }

  static const char* value(const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string rpi_image_version\n"
"string ros_niryo_robot_version\n"
"string robot_version\n"
"\n"
"string[] motor_names\n"
"string[] stepper_firmware_versions\n"
;
  }

  static const char* value(const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rpi_image_version);
      stream.next(m.ros_niryo_robot_version);
      stream.next(m.robot_version);
      stream.next(m.motor_names);
      stream.next(m.stepper_firmware_versions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoftwareVersion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_msgs::SoftwareVersion_<ContainerAllocator>& v)
  {
    s << indent << "rpi_image_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.rpi_image_version);
    s << indent << "ros_niryo_robot_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ros_niryo_robot_version);
    s << indent << "robot_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_version);
    s << indent << "motor_names[]" << std::endl;
    for (size_t i = 0; i < v.motor_names.size(); ++i)
    {
      s << indent << "  motor_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.motor_names[i]);
    }
    s << indent << "stepper_firmware_versions[]" << std::endl;
    for (size_t i = 0; i < v.stepper_firmware_versions.size(); ++i)
    {
      s << indent << "  stepper_firmware_versions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.stepper_firmware_versions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_MSGS_MESSAGE_SOFTWAREVERSION_H
