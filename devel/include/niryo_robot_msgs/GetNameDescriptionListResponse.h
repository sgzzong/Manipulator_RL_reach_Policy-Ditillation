// Generated by gencpp from file niryo_robot_msgs/GetNameDescriptionListResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_MSGS_MESSAGE_GETNAMEDESCRIPTIONLISTRESPONSE_H
#define NIRYO_ROBOT_MSGS_MESSAGE_GETNAMEDESCRIPTIONLISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_msgs
{
template <class ContainerAllocator>
struct GetNameDescriptionListResponse_
{
  typedef GetNameDescriptionListResponse_<ContainerAllocator> Type;

  GetNameDescriptionListResponse_()
    : name_list()
    , description_list()  {
    }
  GetNameDescriptionListResponse_(const ContainerAllocator& _alloc)
    : name_list(_alloc)
    , description_list(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_list_type;
  _name_list_type name_list;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _description_list_type;
  _description_list_type description_list;





  typedef boost::shared_ptr< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetNameDescriptionListResponse_

typedef ::niryo_robot_msgs::GetNameDescriptionListResponse_<std::allocator<void> > GetNameDescriptionListResponse;

typedef boost::shared_ptr< ::niryo_robot_msgs::GetNameDescriptionListResponse > GetNameDescriptionListResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_msgs::GetNameDescriptionListResponse const> GetNameDescriptionListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.name_list == rhs.name_list &&
    lhs.description_list == rhs.description_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5361969a38863a729ef2e599380538df";
  }

  static const char* value(const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5361969a38863a72ULL;
  static const uint64_t static_value2 = 0x9ef2e599380538dfULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/GetNameDescriptionListResponse";
  }

  static const char* value(const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name_list\n"
"string[] description_list\n"
"\n"
;
  }

  static const char* value(const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name_list);
      stream.next(m.description_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetNameDescriptionListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_msgs::GetNameDescriptionListResponse_<ContainerAllocator>& v)
  {
    s << indent << "name_list[]" << std::endl;
    for (size_t i = 0; i < v.name_list.size(); ++i)
    {
      s << indent << "  name_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name_list[i]);
    }
    s << indent << "description_list[]" << std::endl;
    for (size_t i = 0; i < v.description_list.size(); ++i)
    {
      s << indent << "  description_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_MSGS_MESSAGE_GETNAMEDESCRIPTIONLISTRESPONSE_H
