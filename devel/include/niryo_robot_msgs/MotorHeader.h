// Generated by gencpp from file niryo_robot_msgs/MotorHeader.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_MSGS_MESSAGE_MOTORHEADER_H
#define NIRYO_ROBOT_MSGS_MESSAGE_MOTORHEADER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_msgs
{
template <class ContainerAllocator>
struct MotorHeader_
{
  typedef MotorHeader_<ContainerAllocator> Type;

  MotorHeader_()
    : motor_id(0)
    , motor_type(0)  {
    }
  MotorHeader_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , motor_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef uint8_t _motor_type_type;
  _motor_type_type motor_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOTOR_TYPE_STEPPER)
  #undef MOTOR_TYPE_STEPPER
#endif
#if defined(_WIN32) && defined(MOTOR_TYPE_XL430)
  #undef MOTOR_TYPE_XL430
#endif
#if defined(_WIN32) && defined(MOTOR_TYPE_XL320)
  #undef MOTOR_TYPE_XL320
#endif
#if defined(_WIN32) && defined(MOTOR_TYPE_XL330)
  #undef MOTOR_TYPE_XL330
#endif
#if defined(_WIN32) && defined(MOROR_TYPE_XC430)
  #undef MOROR_TYPE_XC430
#endif
#if defined(_WIN32) && defined(MOTOR_TYPE_END_EFFECTOR)
  #undef MOTOR_TYPE_END_EFFECTOR
#endif

  enum {
    MOTOR_TYPE_STEPPER = 1u,
    MOTOR_TYPE_XL430 = 2u,
    MOTOR_TYPE_XL320 = 3u,
    MOTOR_TYPE_XL330 = 4u,
    MOROR_TYPE_XC430 = 5u,
    MOTOR_TYPE_END_EFFECTOR = 10u,
  };


  typedef boost::shared_ptr< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> const> ConstPtr;

}; // struct MotorHeader_

typedef ::niryo_robot_msgs::MotorHeader_<std::allocator<void> > MotorHeader;

typedef boost::shared_ptr< ::niryo_robot_msgs::MotorHeader > MotorHeaderPtr;
typedef boost::shared_ptr< ::niryo_robot_msgs::MotorHeader const> MotorHeaderConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator2> & rhs)
{
  return lhs.motor_id == rhs.motor_id &&
    lhs.motor_type == rhs.motor_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37f646768b4675df61058ccaf9b61862";
  }

  static const char* value(const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37f646768b4675dfULL;
  static const uint64_t static_value2 = 0x61058ccaf9b61862ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/MotorHeader";
  }

  static const char* value(const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 motor_id\n"
"\n"
"uint8 motor_type\n"
"uint8 MOTOR_TYPE_STEPPER=1\n"
"uint8 MOTOR_TYPE_XL430=2\n"
"uint8 MOTOR_TYPE_XL320=3\n"
"uint8 MOTOR_TYPE_XL330=4\n"
"uint8 MOROR_TYPE_XC430=5\n"
"uint8 MOTOR_TYPE_END_EFFECTOR=10\n"
"\n"
;
  }

  static const char* value(const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.motor_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorHeader_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "motor_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_MSGS_MESSAGE_MOTORHEADER_H
