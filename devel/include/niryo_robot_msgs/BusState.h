// Generated by gencpp from file niryo_robot_msgs/BusState.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_MSGS_MESSAGE_BUSSTATE_H
#define NIRYO_ROBOT_MSGS_MESSAGE_BUSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace niryo_robot_msgs
{
template <class ContainerAllocator>
struct BusState_
{
  typedef BusState_<ContainerAllocator> Type;

  BusState_()
    : header()
    , connection_status(false)
    , motor_id_connected()
    , error()  {
    }
  BusState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , connection_status(false)
    , motor_id_connected(_alloc)
    , error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _connection_status_type;
  _connection_status_type connection_status;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _motor_id_connected_type;
  _motor_id_connected_type motor_id_connected;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::niryo_robot_msgs::BusState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_msgs::BusState_<ContainerAllocator> const> ConstPtr;

}; // struct BusState_

typedef ::niryo_robot_msgs::BusState_<std::allocator<void> > BusState;

typedef boost::shared_ptr< ::niryo_robot_msgs::BusState > BusStatePtr;
typedef boost::shared_ptr< ::niryo_robot_msgs::BusState const> BusStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_msgs::BusState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_msgs::BusState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_msgs::BusState_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::BusState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.connection_status == rhs.connection_status &&
    lhs.motor_id_connected == rhs.motor_id_connected &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_msgs::BusState_<ContainerAllocator1> & lhs, const ::niryo_robot_msgs::BusState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_msgs::BusState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_msgs::BusState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_msgs::BusState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "213bd57ffacf403dd0100cbc0fd4d698";
  }

  static const char* value(const ::niryo_robot_msgs::BusState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x213bd57ffacf403dULL;
  static const uint64_t static_value2 = 0xd0100cbc0fd4d698ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/BusState";
  }

  static const char* value(const ::niryo_robot_msgs::BusState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool connection_status\n"
"uint8[] motor_id_connected\n"
"string error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::niryo_robot_msgs::BusState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.connection_status);
      stream.next(m.motor_id_connected);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BusState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_msgs::BusState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_msgs::BusState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "connection_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_status);
    s << indent << "motor_id_connected[]" << std::endl;
    for (size_t i = 0; i < v.motor_id_connected.size(); ++i)
    {
      s << indent << "  motor_id_connected[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motor_id_connected[i]);
    }
    s << indent << "error: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_MSGS_MESSAGE_BUSSTATE_H
