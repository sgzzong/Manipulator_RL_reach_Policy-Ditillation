// Generated by gencpp from file niryo_robot_tools_commander/TCP.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TCP_H
#define NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TCP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <niryo_robot_msgs/RPY.h>
#include <geometry_msgs/Quaternion.h>

namespace niryo_robot_tools_commander
{
template <class ContainerAllocator>
struct TCP_
{
  typedef TCP_<ContainerAllocator> Type;

  TCP_()
    : enabled(false)
    , position()
    , rpy()
    , orientation()  {
    }
  TCP_(const ContainerAllocator& _alloc)
    : enabled(false)
    , position(_alloc)
    , rpy(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::niryo_robot_msgs::RPY_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> const> ConstPtr;

}; // struct TCP_

typedef ::niryo_robot_tools_commander::TCP_<std::allocator<void> > TCP;

typedef boost::shared_ptr< ::niryo_robot_tools_commander::TCP > TCPPtr;
typedef boost::shared_ptr< ::niryo_robot_tools_commander::TCP const> TCPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_tools_commander::TCP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_tools_commander::TCP_<ContainerAllocator1> & lhs, const ::niryo_robot_tools_commander::TCP_<ContainerAllocator2> & rhs)
{
  return lhs.enabled == rhs.enabled &&
    lhs.position == rhs.position &&
    lhs.rpy == rhs.rpy &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_tools_commander::TCP_<ContainerAllocator1> & lhs, const ::niryo_robot_tools_commander::TCP_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_tools_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7d931fce0b5b3aea000ef2cf21430552";
  }

  static const char* value(const ::niryo_robot_tools_commander::TCP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7d931fce0b5b3aeaULL;
  static const uint64_t static_value2 = 0x000ef2cf21430552ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_tools_commander/TCP";
  }

  static const char* value(const ::niryo_robot_tools_commander::TCP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enabled\n"
"\n"
"geometry_msgs/Point position\n"
"niryo_robot_msgs/RPY rpy\n"
"geometry_msgs/Quaternion orientation\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/RPY\n"
"# roll, pitch and yaw\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::niryo_robot_tools_commander::TCP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
      stream.next(m.position);
      stream.next(m.rpy);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TCP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_tools_commander::TCP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_tools_commander::TCP_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::niryo_robot_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_TOOLS_COMMANDER_MESSAGE_TCP_H
