// Generated by gencpp from file can_driver/StepperMotorHardwareStatus.msg
// DO NOT EDIT!


#ifndef CAN_DRIVER_MESSAGE_STEPPERMOTORHARDWARESTATUS_H
#define CAN_DRIVER_MESSAGE_STEPPERMOTORHARDWARESTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_msgs/MotorHeader.h>

namespace can_driver
{
template <class ContainerAllocator>
struct StepperMotorHardwareStatus_
{
  typedef StepperMotorHardwareStatus_<ContainerAllocator> Type;

  StepperMotorHardwareStatus_()
    : motor_identity()
    , firmware_version()
    , temperature(0)
    , voltage(0)
    , error(0)  {
    }
  StepperMotorHardwareStatus_(const ContainerAllocator& _alloc)
    : motor_identity(_alloc)
    , firmware_version(_alloc)
    , temperature(0)
    , voltage(0)
    , error(0)  {
  (void)_alloc;
    }



   typedef  ::niryo_robot_msgs::MotorHeader_<ContainerAllocator>  _motor_identity_type;
  _motor_identity_type motor_identity;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _firmware_version_type;
  _firmware_version_type firmware_version;

   typedef int32_t _temperature_type;
  _temperature_type temperature;

   typedef int32_t _voltage_type;
  _voltage_type voltage;

   typedef int32_t _error_type;
  _error_type error;





  typedef boost::shared_ptr< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> const> ConstPtr;

}; // struct StepperMotorHardwareStatus_

typedef ::can_driver::StepperMotorHardwareStatus_<std::allocator<void> > StepperMotorHardwareStatus;

typedef boost::shared_ptr< ::can_driver::StepperMotorHardwareStatus > StepperMotorHardwareStatusPtr;
typedef boost::shared_ptr< ::can_driver::StepperMotorHardwareStatus const> StepperMotorHardwareStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator1> & lhs, const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator2> & rhs)
{
  return lhs.motor_identity == rhs.motor_identity &&
    lhs.firmware_version == rhs.firmware_version &&
    lhs.temperature == rhs.temperature &&
    lhs.voltage == rhs.voltage &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator1> & lhs, const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc9f2f633cce4d29f5db57dd384bcf57";
  }

  static const char* value(const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc9f2f633cce4d29ULL;
  static const uint64_t static_value2 = 0xf5db57dd384bcf57ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_driver/StepperMotorHardwareStatus";
  }

  static const char* value(const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_msgs/MotorHeader motor_identity\n"
"\n"
"string firmware_version\n"
"int32 temperature\n"
"int32 voltage\n"
"int32 error\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/MotorHeader\n"
"uint8 motor_id\n"
"\n"
"uint8 motor_type\n"
"uint8 MOTOR_TYPE_STEPPER=1\n"
"uint8 MOTOR_TYPE_XL430=2\n"
"uint8 MOTOR_TYPE_XL320=3\n"
"uint8 MOTOR_TYPE_XL330=4\n"
"uint8 MOROR_TYPE_XC430=5\n"
"uint8 MOTOR_TYPE_END_EFFECTOR=10\n"
"\n"
;
  }

  static const char* value(const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_identity);
      stream.next(m.firmware_version);
      stream.next(m.temperature);
      stream.next(m.voltage);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StepperMotorHardwareStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_driver::StepperMotorHardwareStatus_<ContainerAllocator>& v)
  {
    s << indent << "motor_identity: ";
    s << std::endl;
    Printer< ::niryo_robot_msgs::MotorHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.motor_identity);
    s << indent << "firmware_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.firmware_version);
    s << indent << "temperature: ";
    Printer<int32_t>::stream(s, indent + "  ", v.temperature);
    s << indent << "voltage: ";
    Printer<int32_t>::stream(s, indent + "  ", v.voltage);
    s << indent << "error: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_DRIVER_MESSAGE_STEPPERMOTORHARDWARESTATUS_H
