// Generated by gencpp from file can_driver/StepperMotorCommand.msg
// DO NOT EDIT!


#ifndef CAN_DRIVER_MESSAGE_STEPPERMOTORCOMMAND_H
#define CAN_DRIVER_MESSAGE_STEPPERMOTORCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_driver
{
template <class ContainerAllocator>
struct StepperMotorCommand_
{
  typedef StepperMotorCommand_<ContainerAllocator> Type;

  StepperMotorCommand_()
    : cmd_type(0)
    , motors_id()
    , params()  {
    }
  StepperMotorCommand_(const ContainerAllocator& _alloc)
    : cmd_type(0)
    , motors_id(_alloc)
    , params(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _motors_id_type;
  _motors_id_type motors_id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _params_type;
  _params_type params;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CMD_TYPE_POSITION)
  #undef CMD_TYPE_POSITION
#endif
#if defined(_WIN32) && defined(CMD_TYPE_VELOCITY)
  #undef CMD_TYPE_VELOCITY
#endif
#if defined(_WIN32) && defined(CMD_TYPE_EFFORT)
  #undef CMD_TYPE_EFFORT
#endif
#if defined(_WIN32) && defined(CMD_TYPE_TORQUE)
  #undef CMD_TYPE_TORQUE
#endif

  enum {
    CMD_TYPE_POSITION = 1u,
    CMD_TYPE_VELOCITY = 2u,
    CMD_TYPE_EFFORT = 3u,
    CMD_TYPE_TORQUE = 4u,
  };


  typedef boost::shared_ptr< ::can_driver::StepperMotorCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_driver::StepperMotorCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StepperMotorCommand_

typedef ::can_driver::StepperMotorCommand_<std::allocator<void> > StepperMotorCommand;

typedef boost::shared_ptr< ::can_driver::StepperMotorCommand > StepperMotorCommandPtr;
typedef boost::shared_ptr< ::can_driver::StepperMotorCommand const> StepperMotorCommandConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_driver::StepperMotorCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_driver::StepperMotorCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_driver::StepperMotorCommand_<ContainerAllocator1> & lhs, const ::can_driver::StepperMotorCommand_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.motors_id == rhs.motors_id &&
    lhs.params == rhs.params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_driver::StepperMotorCommand_<ContainerAllocator1> & lhs, const ::can_driver::StepperMotorCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_driver::StepperMotorCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_driver::StepperMotorCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_driver::StepperMotorCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c42b44c9b9cc379b2ebb23de94f3faf4";
  }

  static const char* value(const ::can_driver::StepperMotorCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc42b44c9b9cc379bULL;
  static const uint64_t static_value2 = 0x2ebb23de94f3faf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_driver/StepperMotorCommand";
  }

  static const char* value(const ::can_driver::StepperMotorCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cmd_type\n"
"uint8 CMD_TYPE_POSITION=1\n"
"uint8 CMD_TYPE_VELOCITY=2\n"
"uint8 CMD_TYPE_EFFORT=3\n"
"uint8 CMD_TYPE_TORQUE=4\n"
"\n"
"uint8[] motors_id\n"
"int32[] params\n"
;
  }

  static const char* value(const ::can_driver::StepperMotorCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.motors_id);
      stream.next(m.params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StepperMotorCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_driver::StepperMotorCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_driver::StepperMotorCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "motors_id[]" << std::endl;
    for (size_t i = 0; i < v.motors_id.size(); ++i)
    {
      s << indent << "  motors_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.motors_id[i]);
    }
    s << indent << "params[]" << std::endl;
    for (size_t i = 0; i < v.params.size(); ++i)
    {
      s << indent << "  params[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_DRIVER_MESSAGE_STEPPERMOTORCOMMAND_H
