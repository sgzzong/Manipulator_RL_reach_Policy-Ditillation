// Generated by gencpp from file niryo_robot_sound/SoundList.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_SOUND_MESSAGE_SOUNDLIST_H
#define NIRYO_ROBOT_SOUND_MESSAGE_SOUNDLIST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_sound/SoundObject.h>

namespace niryo_robot_sound
{
template <class ContainerAllocator>
struct SoundList_
{
  typedef SoundList_<ContainerAllocator> Type;

  SoundList_()
    : sounds()  {
    }
  SoundList_(const ContainerAllocator& _alloc)
    : sounds(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::niryo_robot_sound::SoundObject_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_sound::SoundObject_<ContainerAllocator> >> _sounds_type;
  _sounds_type sounds;





  typedef boost::shared_ptr< ::niryo_robot_sound::SoundList_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_sound::SoundList_<ContainerAllocator> const> ConstPtr;

}; // struct SoundList_

typedef ::niryo_robot_sound::SoundList_<std::allocator<void> > SoundList;

typedef boost::shared_ptr< ::niryo_robot_sound::SoundList > SoundListPtr;
typedef boost::shared_ptr< ::niryo_robot_sound::SoundList const> SoundListConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_sound::SoundList_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_sound::SoundList_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_sound::SoundList_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::SoundList_<ContainerAllocator2> & rhs)
{
  return lhs.sounds == rhs.sounds;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_sound::SoundList_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::SoundList_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_sound

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::SoundList_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::SoundList_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::SoundList_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05958294ca97e08c8d45a481537fb07d";
  }

  static const char* value(const ::niryo_robot_sound::SoundList_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05958294ca97e08cULL;
  static const uint64_t static_value2 = 0x8d45a481537fb07dULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_sound/SoundList";
  }

  static const char* value(const ::niryo_robot_sound::SoundList_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_sound/SoundObject[] sounds\n"
"================================================================================\n"
"MSG: niryo_robot_sound/SoundObject\n"
"string name\n"
"float64 duration\n"
;
  }

  static const char* value(const ::niryo_robot_sound::SoundList_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sounds);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoundList_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_sound::SoundList_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_sound::SoundList_<ContainerAllocator>& v)
  {
    s << indent << "sounds[]" << std::endl;
    for (size_t i = 0; i < v.sounds.size(); ++i)
    {
      s << indent << "  sounds[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_sound::SoundObject_<ContainerAllocator> >::stream(s, indent + "    ", v.sounds[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_SOUND_MESSAGE_SOUNDLIST_H
