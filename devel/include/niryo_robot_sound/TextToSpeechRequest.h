// Generated by gencpp from file niryo_robot_sound/TextToSpeechRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_SOUND_MESSAGE_TEXTTOSPEECHREQUEST_H
#define NIRYO_ROBOT_SOUND_MESSAGE_TEXTTOSPEECHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_sound
{
template <class ContainerAllocator>
struct TextToSpeechRequest_
{
  typedef TextToSpeechRequest_<ContainerAllocator> Type;

  TextToSpeechRequest_()
    : text()
    , language(0)  {
    }
  TextToSpeechRequest_(const ContainerAllocator& _alloc)
    : text(_alloc)
    , language(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef int8_t _language_type;
  _language_type language;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ENGLISH)
  #undef ENGLISH
#endif
#if defined(_WIN32) && defined(FRENCH)
  #undef FRENCH
#endif
#if defined(_WIN32) && defined(SPANISH)
  #undef SPANISH
#endif
#if defined(_WIN32) && defined(MANDARIN)
  #undef MANDARIN
#endif
#if defined(_WIN32) && defined(PORTUGUESE)
  #undef PORTUGUESE
#endif

  enum {
    ENGLISH = 0,
    FRENCH = 1,
    SPANISH = 3,
    MANDARIN = 4,
    PORTUGUESE = 5,
  };


  typedef boost::shared_ptr< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TextToSpeechRequest_

typedef ::niryo_robot_sound::TextToSpeechRequest_<std::allocator<void> > TextToSpeechRequest;

typedef boost::shared_ptr< ::niryo_robot_sound::TextToSpeechRequest > TextToSpeechRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_sound::TextToSpeechRequest const> TextToSpeechRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator2> & rhs)
{
  return lhs.text == rhs.text &&
    lhs.language == rhs.language;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_sound

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a43fc31ce641f32202bd219bfcf25f9";
  }

  static const char* value(const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a43fc31ce641f32ULL;
  static const uint64_t static_value2 = 0x202bd219bfcf25f9ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_sound/TextToSpeechRequest";
  }

  static const char* value(const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string text # < 100 char\n"
"\n"
"\n"
"int8 ENGLISH = 0\n"
"int8 FRENCH = 1\n"
"int8 SPANISH = 3\n"
"int8 MANDARIN = 4\n"
"int8 PORTUGUESE = 5\n"
"\n"
"int8 language\n"
;
  }

  static const char* value(const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.text);
      stream.next(m.language);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TextToSpeechRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_sound::TextToSpeechRequest_<ContainerAllocator>& v)
  {
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "language: ";
    Printer<int8_t>::stream(s, indent + "  ", v.language);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_SOUND_MESSAGE_TEXTTOSPEECHREQUEST_H
