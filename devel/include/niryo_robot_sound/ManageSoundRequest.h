// Generated by gencpp from file niryo_robot_sound/ManageSoundRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_SOUND_MESSAGE_MANAGESOUNDREQUEST_H
#define NIRYO_ROBOT_SOUND_MESSAGE_MANAGESOUNDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_sound
{
template <class ContainerAllocator>
struct ManageSoundRequest_
{
  typedef ManageSoundRequest_<ContainerAllocator> Type;

  ManageSoundRequest_()
    : sound_name()
    , action(0)
    , sound_data()  {
    }
  ManageSoundRequest_(const ContainerAllocator& _alloc)
    : sound_name(_alloc)
    , action(0)
    , sound_data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sound_name_type;
  _sound_name_type sound_name;

   typedef int8_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _sound_data_type;
  _sound_data_type sound_data;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ADD)
  #undef ADD
#endif
#if defined(_WIN32) && defined(DELETE)
  #undef DELETE
#endif

  enum {
    ADD = 1,
    DELETE = 2,
  };


  typedef boost::shared_ptr< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManageSoundRequest_

typedef ::niryo_robot_sound::ManageSoundRequest_<std::allocator<void> > ManageSoundRequest;

typedef boost::shared_ptr< ::niryo_robot_sound::ManageSoundRequest > ManageSoundRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_sound::ManageSoundRequest const> ManageSoundRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator2> & rhs)
{
  return lhs.sound_name == rhs.sound_name &&
    lhs.action == rhs.action &&
    lhs.sound_data == rhs.sound_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_sound

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d206b05f5f80c762821ef2dc0ffb1339";
  }

  static const char* value(const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd206b05f5f80c762ULL;
  static const uint64_t static_value2 = 0x821ef2dc0ffb1339ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_sound/ManageSoundRequest";
  }

  static const char* value(const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string sound_name\n"
"\n"
"int8 ADD = 1\n"
"int8 DELETE = 2\n"
"int8 action\n"
"\n"
"# Data to add a new sound\n"
"string sound_data\n"
"\n"
;
  }

  static const char* value(const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sound_name);
      stream.next(m.action);
      stream.next(m.sound_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManageSoundRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_sound::ManageSoundRequest_<ContainerAllocator>& v)
  {
    s << indent << "sound_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sound_name);
    s << indent << "action: ";
    Printer<int8_t>::stream(s, indent + "  ", v.action);
    s << indent << "sound_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.sound_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_SOUND_MESSAGE_MANAGESOUNDREQUEST_H
