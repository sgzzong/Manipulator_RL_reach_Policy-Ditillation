// Generated by gencpp from file niryo_robot_vision/SetImageParameterRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_VISION_MESSAGE_SETIMAGEPARAMETERREQUEST_H
#define NIRYO_ROBOT_VISION_MESSAGE_SETIMAGEPARAMETERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_vision
{
template <class ContainerAllocator>
struct SetImageParameterRequest_
{
  typedef SetImageParameterRequest_<ContainerAllocator> Type;

  SetImageParameterRequest_()
    : factor(0.0)  {
    }
  SetImageParameterRequest_(const ContainerAllocator& _alloc)
    : factor(0.0)  {
  (void)_alloc;
    }



   typedef double _factor_type;
  _factor_type factor;





  typedef boost::shared_ptr< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetImageParameterRequest_

typedef ::niryo_robot_vision::SetImageParameterRequest_<std::allocator<void> > SetImageParameterRequest;

typedef boost::shared_ptr< ::niryo_robot_vision::SetImageParameterRequest > SetImageParameterRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_vision::SetImageParameterRequest const> SetImageParameterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.factor == rhs.factor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "763f9d7bcb542b6bea5e474950adf365";
  }

  static const char* value(const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x763f9d7bcb542b6bULL;
  static const uint64_t static_value2 = 0xea5e474950adf365ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_vision/SetImageParameterRequest";
  }

  static const char* value(const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 factor\n"
;
  }

  static const char* value(const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetImageParameterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_vision::SetImageParameterRequest_<ContainerAllocator>& v)
  {
    s << indent << "factor: ";
    Printer<double>::stream(s, indent + "  ", v.factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_VISION_MESSAGE_SETIMAGEPARAMETERREQUEST_H
