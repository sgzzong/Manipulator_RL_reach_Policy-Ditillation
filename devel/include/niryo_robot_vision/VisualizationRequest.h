// Generated by gencpp from file niryo_robot_vision/VisualizationRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_VISION_MESSAGE_VISUALIZATIONREQUEST_H
#define NIRYO_ROBOT_VISION_MESSAGE_VISUALIZATIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_vision
{
template <class ContainerAllocator>
struct VisualizationRequest_
{
  typedef VisualizationRequest_<ContainerAllocator> Type;

  VisualizationRequest_()
    : workspace()
    , clearing(false)  {
    }
  VisualizationRequest_(const ContainerAllocator& _alloc)
    : workspace(_alloc)
    , clearing(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _workspace_type;
  _workspace_type workspace;

   typedef uint8_t _clearing_type;
  _clearing_type clearing;





  typedef boost::shared_ptr< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VisualizationRequest_

typedef ::niryo_robot_vision::VisualizationRequest_<std::allocator<void> > VisualizationRequest;

typedef boost::shared_ptr< ::niryo_robot_vision::VisualizationRequest > VisualizationRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_vision::VisualizationRequest const> VisualizationRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator2> & rhs)
{
  return lhs.workspace == rhs.workspace &&
    lhs.clearing == rhs.clearing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab1a76ffa53dc45be6e78b20bb3e4d15";
  }

  static const char* value(const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab1a76ffa53dc45bULL;
  static const uint64_t static_value2 = 0xe6e78b20bb3e4d15ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_vision/VisualizationRequest";
  }

  static const char* value(const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string workspace\n"
"bool clearing\n"
;
  }

  static const char* value(const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.workspace);
      stream.next(m.clearing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualizationRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_vision::VisualizationRequest_<ContainerAllocator>& v)
  {
    s << indent << "workspace: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.workspace);
    s << indent << "clearing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clearing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_VISION_MESSAGE_VISUALIZATIONREQUEST_H
