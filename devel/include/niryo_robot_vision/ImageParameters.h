// Generated by gencpp from file niryo_robot_vision/ImageParameters.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_VISION_MESSAGE_IMAGEPARAMETERS_H
#define NIRYO_ROBOT_VISION_MESSAGE_IMAGEPARAMETERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_vision
{
template <class ContainerAllocator>
struct ImageParameters_
{
  typedef ImageParameters_<ContainerAllocator> Type;

  ImageParameters_()
    : brightness_factor(0.0)
    , contrast_factor(0.0)
    , saturation_factor(0.0)  {
    }
  ImageParameters_(const ContainerAllocator& _alloc)
    : brightness_factor(0.0)
    , contrast_factor(0.0)
    , saturation_factor(0.0)  {
  (void)_alloc;
    }



   typedef double _brightness_factor_type;
  _brightness_factor_type brightness_factor;

   typedef double _contrast_factor_type;
  _contrast_factor_type contrast_factor;

   typedef double _saturation_factor_type;
  _saturation_factor_type saturation_factor;





  typedef boost::shared_ptr< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> const> ConstPtr;

}; // struct ImageParameters_

typedef ::niryo_robot_vision::ImageParameters_<std::allocator<void> > ImageParameters;

typedef boost::shared_ptr< ::niryo_robot_vision::ImageParameters > ImageParametersPtr;
typedef boost::shared_ptr< ::niryo_robot_vision::ImageParameters const> ImageParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_vision::ImageParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_vision::ImageParameters_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::ImageParameters_<ContainerAllocator2> & rhs)
{
  return lhs.brightness_factor == rhs.brightness_factor &&
    lhs.contrast_factor == rhs.contrast_factor &&
    lhs.saturation_factor == rhs.saturation_factor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_vision::ImageParameters_<ContainerAllocator1> & lhs, const ::niryo_robot_vision::ImageParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_vision

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b9ee591aa6a512b640f955e2c18acaf";
  }

  static const char* value(const ::niryo_robot_vision::ImageParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b9ee591aa6a512bULL;
  static const uint64_t static_value2 = 0x640f955e2c18acafULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_vision/ImageParameters";
  }

  static const char* value(const ::niryo_robot_vision::ImageParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 brightness_factor\n"
"float64 contrast_factor\n"
"float64 saturation_factor\n"
;
  }

  static const char* value(const ::niryo_robot_vision::ImageParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.brightness_factor);
      stream.next(m.contrast_factor);
      stream.next(m.saturation_factor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImageParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_vision::ImageParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_vision::ImageParameters_<ContainerAllocator>& v)
  {
    s << indent << "brightness_factor: ";
    Printer<double>::stream(s, indent + "  ", v.brightness_factor);
    s << indent << "contrast_factor: ";
    Printer<double>::stream(s, indent + "  ", v.contrast_factor);
    s << indent << "saturation_factor: ";
    Printer<double>::stream(s, indent + "  ", v.saturation_factor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_VISION_MESSAGE_IMAGEPARAMETERS_H
