// Generated by gencpp from file end_effector_interface/EEIOState.msg
// DO NOT EDIT!


#ifndef END_EFFECTOR_INTERFACE_MESSAGE_EEIOSTATE_H
#define END_EFFECTOR_INTERFACE_MESSAGE_EEIOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace end_effector_interface
{
template <class ContainerAllocator>
struct EEIOState_
{
  typedef EEIOState_<ContainerAllocator> Type;

  EEIOState_()
    : digital_input(false)
    , digital_output(false)  {
    }
  EEIOState_(const ContainerAllocator& _alloc)
    : digital_input(false)
    , digital_output(false)  {
  (void)_alloc;
    }



   typedef uint8_t _digital_input_type;
  _digital_input_type digital_input;

   typedef uint8_t _digital_output_type;
  _digital_output_type digital_output;





  typedef boost::shared_ptr< ::end_effector_interface::EEIOState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::end_effector_interface::EEIOState_<ContainerAllocator> const> ConstPtr;

}; // struct EEIOState_

typedef ::end_effector_interface::EEIOState_<std::allocator<void> > EEIOState;

typedef boost::shared_ptr< ::end_effector_interface::EEIOState > EEIOStatePtr;
typedef boost::shared_ptr< ::end_effector_interface::EEIOState const> EEIOStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::end_effector_interface::EEIOState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::end_effector_interface::EEIOState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::end_effector_interface::EEIOState_<ContainerAllocator1> & lhs, const ::end_effector_interface::EEIOState_<ContainerAllocator2> & rhs)
{
  return lhs.digital_input == rhs.digital_input &&
    lhs.digital_output == rhs.digital_output;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::end_effector_interface::EEIOState_<ContainerAllocator1> & lhs, const ::end_effector_interface::EEIOState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace end_effector_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::end_effector_interface::EEIOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::end_effector_interface::EEIOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::end_effector_interface::EEIOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::end_effector_interface::EEIOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::end_effector_interface::EEIOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::end_effector_interface::EEIOState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::end_effector_interface::EEIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "809bceb7a033605762abfa0c8d28d0ad";
  }

  static const char* value(const ::end_effector_interface::EEIOState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x809bceb7a0336057ULL;
  static const uint64_t static_value2 = 0x62abfa0c8d28d0adULL;
};

template<class ContainerAllocator>
struct DataType< ::end_effector_interface::EEIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "end_effector_interface/EEIOState";
  }

  static const char* value(const ::end_effector_interface::EEIOState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::end_effector_interface::EEIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool digital_input\n"
"bool digital_output\n"
;
  }

  static const char* value(const ::end_effector_interface::EEIOState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::end_effector_interface::EEIOState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.digital_input);
      stream.next(m.digital_output);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EEIOState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::end_effector_interface::EEIOState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::end_effector_interface::EEIOState_<ContainerAllocator>& v)
  {
    s << indent << "digital_input: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_input);
    s << indent << "digital_output: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.digital_output);
  }
};

} // namespace message_operations
} // namespace ros

#endif // END_EFFECTOR_INTERFACE_MESSAGE_EEIOSTATE_H
