// Generated by gencpp from file conveyor_interface/SetConveyorRequest.msg
// DO NOT EDIT!


#ifndef CONVEYOR_INTERFACE_MESSAGE_SETCONVEYORREQUEST_H
#define CONVEYOR_INTERFACE_MESSAGE_SETCONVEYORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conveyor_interface
{
template <class ContainerAllocator>
struct SetConveyorRequest_
{
  typedef SetConveyorRequest_<ContainerAllocator> Type;

  SetConveyorRequest_()
    : cmd(0)
    , id(0)  {
    }
  SetConveyorRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , id(0)  {
  (void)_alloc;
    }



   typedef uint8_t _cmd_type;
  _cmd_type cmd;

   typedef uint8_t _id_type;
  _id_type id;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ADD)
  #undef ADD
#endif
#if defined(_WIN32) && defined(REMOVE)
  #undef REMOVE
#endif

  enum {
    ADD = 1u,
    REMOVE = 2u,
  };


  typedef boost::shared_ptr< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetConveyorRequest_

typedef ::conveyor_interface::SetConveyorRequest_<std::allocator<void> > SetConveyorRequest;

typedef boost::shared_ptr< ::conveyor_interface::SetConveyorRequest > SetConveyorRequestPtr;
typedef boost::shared_ptr< ::conveyor_interface::SetConveyorRequest const> SetConveyorRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator1> & lhs, const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.id == rhs.id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator1> & lhs, const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conveyor_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48c4e4eda0239f610f2f937669b48488";
  }

  static const char* value(const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48c4e4eda0239f61ULL;
  static const uint64_t static_value2 = 0x0f2f937669b48488ULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyor_interface/SetConveyorRequest";
  }

  static const char* value(const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 cmd\n"
"uint8 id\n"
"\n"
"uint8 ADD = 1\n"
"uint8 REMOVE = 2\n"
"\n"
;
  }

  static const char* value(const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetConveyorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyor_interface::SetConveyorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyor_interface::SetConveyorRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYOR_INTERFACE_MESSAGE_SETCONVEYORREQUEST_H
