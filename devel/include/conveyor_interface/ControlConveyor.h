// Generated by gencpp from file conveyor_interface/ControlConveyor.msg
// DO NOT EDIT!


#ifndef CONVEYOR_INTERFACE_MESSAGE_CONTROLCONVEYOR_H
#define CONVEYOR_INTERFACE_MESSAGE_CONTROLCONVEYOR_H

#include <ros/service_traits.h>


#include <conveyor_interface/ControlConveyorRequest.h>
#include <conveyor_interface/ControlConveyorResponse.h>


namespace conveyor_interface
{

struct ControlConveyor
{

typedef ControlConveyorRequest Request;
typedef ControlConveyorResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct ControlConveyor
} // namespace conveyor_interface


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::conveyor_interface::ControlConveyor > {
  static const char* value()
  {
    return "1a12d96c98fd71f849fe51970dc7ea3b";
  }

  static const char* value(const ::conveyor_interface::ControlConveyor&) { return value(); }
};

template<>
struct DataType< ::conveyor_interface::ControlConveyor > {
  static const char* value()
  {
    return "conveyor_interface/ControlConveyor";
  }

  static const char* value(const ::conveyor_interface::ControlConveyor&) { return value(); }
};


// service_traits::MD5Sum< ::conveyor_interface::ControlConveyorRequest> should match
// service_traits::MD5Sum< ::conveyor_interface::ControlConveyor >
template<>
struct MD5Sum< ::conveyor_interface::ControlConveyorRequest>
{
  static const char* value()
  {
    return MD5Sum< ::conveyor_interface::ControlConveyor >::value();
  }
  static const char* value(const ::conveyor_interface::ControlConveyorRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::conveyor_interface::ControlConveyorRequest> should match
// service_traits::DataType< ::conveyor_interface::ControlConveyor >
template<>
struct DataType< ::conveyor_interface::ControlConveyorRequest>
{
  static const char* value()
  {
    return DataType< ::conveyor_interface::ControlConveyor >::value();
  }
  static const char* value(const ::conveyor_interface::ControlConveyorRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::conveyor_interface::ControlConveyorResponse> should match
// service_traits::MD5Sum< ::conveyor_interface::ControlConveyor >
template<>
struct MD5Sum< ::conveyor_interface::ControlConveyorResponse>
{
  static const char* value()
  {
    return MD5Sum< ::conveyor_interface::ControlConveyor >::value();
  }
  static const char* value(const ::conveyor_interface::ControlConveyorResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::conveyor_interface::ControlConveyorResponse> should match
// service_traits::DataType< ::conveyor_interface::ControlConveyor >
template<>
struct DataType< ::conveyor_interface::ControlConveyorResponse>
{
  static const char* value()
  {
    return DataType< ::conveyor_interface::ControlConveyor >::value();
  }
  static const char* value(const ::conveyor_interface::ControlConveyorResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // CONVEYOR_INTERFACE_MESSAGE_CONTROLCONVEYOR_H
