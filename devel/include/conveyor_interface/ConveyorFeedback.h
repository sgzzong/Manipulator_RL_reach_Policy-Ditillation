// Generated by gencpp from file conveyor_interface/ConveyorFeedback.msg
// DO NOT EDIT!


#ifndef CONVEYOR_INTERFACE_MESSAGE_CONVEYORFEEDBACK_H
#define CONVEYOR_INTERFACE_MESSAGE_CONVEYORFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace conveyor_interface
{
template <class ContainerAllocator>
struct ConveyorFeedback_
{
  typedef ConveyorFeedback_<ContainerAllocator> Type;

  ConveyorFeedback_()
    : conveyor_id(0)
    , connection_state(false)
    , running(false)
    , speed(0)
    , direction(0)  {
    }
  ConveyorFeedback_(const ContainerAllocator& _alloc)
    : conveyor_id(0)
    , connection_state(false)
    , running(false)
    , speed(0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef uint8_t _conveyor_id_type;
  _conveyor_id_type conveyor_id;

   typedef uint8_t _connection_state_type;
  _connection_state_type connection_state;

   typedef uint8_t _running_type;
  _running_type running;

   typedef int16_t _speed_type;
  _speed_type speed;

   typedef int8_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ConveyorFeedback_

typedef ::conveyor_interface::ConveyorFeedback_<std::allocator<void> > ConveyorFeedback;

typedef boost::shared_ptr< ::conveyor_interface::ConveyorFeedback > ConveyorFeedbackPtr;
typedef boost::shared_ptr< ::conveyor_interface::ConveyorFeedback const> ConveyorFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator1> & lhs, const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.conveyor_id == rhs.conveyor_id &&
    lhs.connection_state == rhs.connection_state &&
    lhs.running == rhs.running &&
    lhs.speed == rhs.speed &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator1> & lhs, const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace conveyor_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e7764cd998f86f936c67fc5b79bd288";
  }

  static const char* value(const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e7764cd998f86f9ULL;
  static const uint64_t static_value2 = 0x36c67fc5b79bd288ULL;
};

template<class ContainerAllocator>
struct DataType< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "conveyor_interface/ConveyorFeedback";
  }

  static const char* value(const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"#Conveyor id ( either 12 or 18)\n"
"uint8 conveyor_id\n"
"#Conveyor Connection state ( if it is enabled) \n"
"bool connection_state\n"
"# Conveyor Controls state : ON or OFF\n"
"bool running\n"
"# Conveyor Speed ( 1-> 100 %)\n"
"int16 speed\n"
"# Conveyor direction ( backward or forward)\n"
"int8 direction\n"
;
  }

  static const char* value(const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.conveyor_id);
      stream.next(m.connection_state);
      stream.next(m.running);
      stream.next(m.speed);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConveyorFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::conveyor_interface::ConveyorFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::conveyor_interface::ConveyorFeedback_<ContainerAllocator>& v)
  {
    s << indent << "conveyor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.conveyor_id);
    s << indent << "connection_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_state);
    s << indent << "running: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.running);
    s << indent << "speed: ";
    Printer<int16_t>::stream(s, indent + "  ", v.speed);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONVEYOR_INTERFACE_MESSAGE_CONVEYORFEEDBACK_H
