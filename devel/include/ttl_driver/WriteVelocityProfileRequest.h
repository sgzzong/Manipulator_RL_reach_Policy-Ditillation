// Generated by gencpp from file ttl_driver/WriteVelocityProfileRequest.msg
// DO NOT EDIT!


#ifndef TTL_DRIVER_MESSAGE_WRITEVELOCITYPROFILEREQUEST_H
#define TTL_DRIVER_MESSAGE_WRITEVELOCITYPROFILEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ttl_driver
{
template <class ContainerAllocator>
struct WriteVelocityProfileRequest_
{
  typedef WriteVelocityProfileRequest_<ContainerAllocator> Type;

  WriteVelocityProfileRequest_()
    : id(0)
    , v_start(0.0)
    , a_1(0.0)
    , v_1(0.0)
    , a_max(0.0)
    , v_max(0.0)
    , d_max(0.0)
    , d_1(0.0)
    , v_stop(0.0)  {
    }
  WriteVelocityProfileRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , v_start(0.0)
    , a_1(0.0)
    , v_1(0.0)
    , a_max(0.0)
    , v_max(0.0)
    , d_max(0.0)
    , d_1(0.0)
    , v_stop(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef double _v_start_type;
  _v_start_type v_start;

   typedef double _a_1_type;
  _a_1_type a_1;

   typedef double _v_1_type;
  _v_1_type v_1;

   typedef double _a_max_type;
  _a_max_type a_max;

   typedef double _v_max_type;
  _v_max_type v_max;

   typedef double _d_max_type;
  _d_max_type d_max;

   typedef double _d_1_type;
  _d_1_type d_1;

   typedef double _v_stop_type;
  _v_stop_type v_stop;





  typedef boost::shared_ptr< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WriteVelocityProfileRequest_

typedef ::ttl_driver::WriteVelocityProfileRequest_<std::allocator<void> > WriteVelocityProfileRequest;

typedef boost::shared_ptr< ::ttl_driver::WriteVelocityProfileRequest > WriteVelocityProfileRequestPtr;
typedef boost::shared_ptr< ::ttl_driver::WriteVelocityProfileRequest const> WriteVelocityProfileRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator1> & lhs, const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.v_start == rhs.v_start &&
    lhs.a_1 == rhs.a_1 &&
    lhs.v_1 == rhs.v_1 &&
    lhs.a_max == rhs.a_max &&
    lhs.v_max == rhs.v_max &&
    lhs.d_max == rhs.d_max &&
    lhs.d_1 == rhs.d_1 &&
    lhs.v_stop == rhs.v_stop;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator1> & lhs, const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ttl_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fe73064e084fae93ac413bbc22f9f09";
  }

  static const char* value(const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fe73064e084fae9ULL;
  static const uint64_t static_value2 = 0x3ac413bbc22f9f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ttl_driver/WriteVelocityProfileRequest";
  }

  static const char* value(const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Check stepper ttl reference doc for\n"
"# the complete register table\n"
"\n"
"uint8 id\n"
"\n"
"float64 v_start\n"
"\n"
"float64 a_1\n"
"float64 v_1\n"
"\n"
"float64 a_max\n"
"float64 v_max\n"
"float64 d_max\n"
"\n"
"float64 d_1\n"
"\n"
"float64 v_stop\n"
;
  }

  static const char* value(const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.v_start);
      stream.next(m.a_1);
      stream.next(m.v_1);
      stream.next(m.a_max);
      stream.next(m.v_max);
      stream.next(m.d_max);
      stream.next(m.d_1);
      stream.next(m.v_stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WriteVelocityProfileRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ttl_driver::WriteVelocityProfileRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "v_start: ";
    Printer<double>::stream(s, indent + "  ", v.v_start);
    s << indent << "a_1: ";
    Printer<double>::stream(s, indent + "  ", v.a_1);
    s << indent << "v_1: ";
    Printer<double>::stream(s, indent + "  ", v.v_1);
    s << indent << "a_max: ";
    Printer<double>::stream(s, indent + "  ", v.a_max);
    s << indent << "v_max: ";
    Printer<double>::stream(s, indent + "  ", v.v_max);
    s << indent << "d_max: ";
    Printer<double>::stream(s, indent + "  ", v.d_max);
    s << indent << "d_1: ";
    Printer<double>::stream(s, indent + "  ", v.d_1);
    s << indent << "v_stop: ";
    Printer<double>::stream(s, indent + "  ", v.v_stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TTL_DRIVER_MESSAGE_WRITEVELOCITYPROFILEREQUEST_H
