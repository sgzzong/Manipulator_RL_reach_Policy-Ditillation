// Generated by gencpp from file ttl_driver/WritePIDValueRequest.msg
// DO NOT EDIT!


#ifndef TTL_DRIVER_MESSAGE_WRITEPIDVALUEREQUEST_H
#define TTL_DRIVER_MESSAGE_WRITEPIDVALUEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ttl_driver
{
template <class ContainerAllocator>
struct WritePIDValueRequest_
{
  typedef WritePIDValueRequest_<ContainerAllocator> Type;

  WritePIDValueRequest_()
    : id(0)
    , pos_p_gain(0)
    , pos_i_gain(0)
    , pos_d_gain(0)
    , vel_p_gain(0)
    , vel_i_gain(0)
    , ff1_gain(0)
    , ff2_gain(0)
    , vel_profile(0)
    , acc_profile(0)  {
    }
  WritePIDValueRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , pos_p_gain(0)
    , pos_i_gain(0)
    , pos_d_gain(0)
    , vel_p_gain(0)
    , vel_i_gain(0)
    , ff1_gain(0)
    , ff2_gain(0)
    , vel_profile(0)
    , acc_profile(0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef uint16_t _pos_p_gain_type;
  _pos_p_gain_type pos_p_gain;

   typedef uint16_t _pos_i_gain_type;
  _pos_i_gain_type pos_i_gain;

   typedef uint16_t _pos_d_gain_type;
  _pos_d_gain_type pos_d_gain;

   typedef uint16_t _vel_p_gain_type;
  _vel_p_gain_type vel_p_gain;

   typedef uint16_t _vel_i_gain_type;
  _vel_i_gain_type vel_i_gain;

   typedef uint16_t _ff1_gain_type;
  _ff1_gain_type ff1_gain;

   typedef uint16_t _ff2_gain_type;
  _ff2_gain_type ff2_gain;

   typedef uint32_t _vel_profile_type;
  _vel_profile_type vel_profile;

   typedef uint32_t _acc_profile_type;
  _acc_profile_type acc_profile;





  typedef boost::shared_ptr< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WritePIDValueRequest_

typedef ::ttl_driver::WritePIDValueRequest_<std::allocator<void> > WritePIDValueRequest;

typedef boost::shared_ptr< ::ttl_driver::WritePIDValueRequest > WritePIDValueRequestPtr;
typedef boost::shared_ptr< ::ttl_driver::WritePIDValueRequest const> WritePIDValueRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator1> & lhs, const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pos_p_gain == rhs.pos_p_gain &&
    lhs.pos_i_gain == rhs.pos_i_gain &&
    lhs.pos_d_gain == rhs.pos_d_gain &&
    lhs.vel_p_gain == rhs.vel_p_gain &&
    lhs.vel_i_gain == rhs.vel_i_gain &&
    lhs.ff1_gain == rhs.ff1_gain &&
    lhs.ff2_gain == rhs.ff2_gain &&
    lhs.vel_profile == rhs.vel_profile &&
    lhs.acc_profile == rhs.acc_profile;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator1> & lhs, const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ttl_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72133310c8095b1fd7ac5be8d1b09825";
  }

  static const char* value(const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72133310c8095b1fULL;
  static const uint64_t static_value2 = 0xd7ac5be8d1b09825ULL;
};

template<class ContainerAllocator>
struct DataType< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ttl_driver/WritePIDValueRequest";
  }

  static const char* value(const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Check XL-XXX motors reference doc for\n"
"# the complete register table\n"
"\n"
"uint8 id\n"
"uint16 pos_p_gain\n"
"uint16 pos_i_gain\n"
"uint16 pos_d_gain\n"
"\n"
"uint16 vel_p_gain\n"
"uint16 vel_i_gain\n"
"\n"
"uint16 ff1_gain\n"
"uint16 ff2_gain\n"
"\n"
"# vel and acc profile for dxl\n"
"uint32 vel_profile\n"
"uint32 acc_profile\n"
;
  }

  static const char* value(const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pos_p_gain);
      stream.next(m.pos_i_gain);
      stream.next(m.pos_d_gain);
      stream.next(m.vel_p_gain);
      stream.next(m.vel_i_gain);
      stream.next(m.ff1_gain);
      stream.next(m.ff2_gain);
      stream.next(m.vel_profile);
      stream.next(m.acc_profile);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WritePIDValueRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ttl_driver::WritePIDValueRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ttl_driver::WritePIDValueRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "pos_p_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pos_p_gain);
    s << indent << "pos_i_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pos_i_gain);
    s << indent << "pos_d_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pos_d_gain);
    s << indent << "vel_p_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vel_p_gain);
    s << indent << "vel_i_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.vel_i_gain);
    s << indent << "ff1_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ff1_gain);
    s << indent << "ff2_gain: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ff2_gain);
    s << indent << "vel_profile: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.vel_profile);
    s << indent << "acc_profile: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.acc_profile);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TTL_DRIVER_MESSAGE_WRITEPIDVALUEREQUEST_H
