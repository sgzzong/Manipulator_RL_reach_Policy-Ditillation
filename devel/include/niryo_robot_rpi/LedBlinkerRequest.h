// Generated by gencpp from file niryo_robot_rpi/LedBlinkerRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_RPI_MESSAGE_LEDBLINKERREQUEST_H
#define NIRYO_ROBOT_RPI_MESSAGE_LEDBLINKERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_rpi
{
template <class ContainerAllocator>
struct LedBlinkerRequest_
{
  typedef LedBlinkerRequest_<ContainerAllocator> Type;

  LedBlinkerRequest_()
    : activate(false)
    , frequency(0)
    , color(0)
    , blinker_duration(0.0)  {
    }
  LedBlinkerRequest_(const ContainerAllocator& _alloc)
    : activate(false)
    , frequency(0)
    , color(0)
    , blinker_duration(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _activate_type;
  _activate_type activate;

   typedef uint8_t _frequency_type;
  _frequency_type frequency;

   typedef uint8_t _color_type;
  _color_type color;

   typedef float _blinker_duration_type;
  _blinker_duration_type blinker_duration;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LED_OFF)
  #undef LED_OFF
#endif
#if defined(_WIN32) && defined(LED_BLUE)
  #undef LED_BLUE
#endif
#if defined(_WIN32) && defined(LED_GREEN)
  #undef LED_GREEN
#endif
#if defined(_WIN32) && defined(LED_BLUE_GREEN)
  #undef LED_BLUE_GREEN
#endif
#if defined(_WIN32) && defined(LED_RED)
  #undef LED_RED
#endif
#if defined(_WIN32) && defined(LED_PURPLE)
  #undef LED_PURPLE
#endif
#if defined(_WIN32) && defined(LED_RED_GREEN)
  #undef LED_RED_GREEN
#endif
#if defined(_WIN32) && defined(LED_WHITE)
  #undef LED_WHITE
#endif

  enum {
    LED_OFF = 0u,
    LED_BLUE = 1u,
    LED_GREEN = 2u,
    LED_BLUE_GREEN = 3u,
    LED_RED = 4u,
    LED_PURPLE = 5u,
    LED_RED_GREEN = 6u,
    LED_WHITE = 7u,
  };


  typedef boost::shared_ptr< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LedBlinkerRequest_

typedef ::niryo_robot_rpi::LedBlinkerRequest_<std::allocator<void> > LedBlinkerRequest;

typedef boost::shared_ptr< ::niryo_robot_rpi::LedBlinkerRequest > LedBlinkerRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_rpi::LedBlinkerRequest const> LedBlinkerRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.activate == rhs.activate &&
    lhs.frequency == rhs.frequency &&
    lhs.color == rhs.color &&
    lhs.blinker_duration == rhs.blinker_duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_rpi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa3d8cedc0dae639a111323faa9bebec";
  }

  static const char* value(const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa3d8cedc0dae639ULL;
  static const uint64_t static_value2 = 0xa111323faa9bebecULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/LedBlinkerRequest";
  }

  static const char* value(const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 LED_OFF = 0\n"
"uint8 LED_BLUE = 1\n"
"uint8 LED_GREEN = 2\n"
"uint8 LED_BLUE_GREEN = 3\n"
"uint8 LED_RED = 4\n"
"uint8 LED_PURPLE = 5\n"
"uint8 LED_RED_GREEN = 6\n"
"uint8 LED_WHITE = 7\n"
"\n"
"bool activate\n"
"uint8 frequency # between 1hz and 100Hz\n"
"uint8 color\n"
"float32 blinker_duration # 0 for infinite\n"
;
  }

  static const char* value(const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.activate);
      stream.next(m.frequency);
      stream.next(m.color);
      stream.next(m.blinker_duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedBlinkerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_rpi::LedBlinkerRequest_<ContainerAllocator>& v)
  {
    s << indent << "activate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.activate);
    s << indent << "frequency: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frequency);
    s << indent << "color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.color);
    s << indent << "blinker_duration: ";
    Printer<float>::stream(s, indent + "  ", v.blinker_duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_RPI_MESSAGE_LEDBLINKERREQUEST_H
