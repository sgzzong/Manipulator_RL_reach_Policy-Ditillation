// Generated by gencpp from file niryo_robot_rpi/ScanI2CBusResponse.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_RPI_MESSAGE_SCANI2CBUSRESPONSE_H
#define NIRYO_ROBOT_RPI_MESSAGE_SCANI2CBUSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_rpi/I2CComponent.h>
#include <niryo_robot_rpi/I2CComponent.h>

namespace niryo_robot_rpi
{
template <class ContainerAllocator>
struct ScanI2CBusResponse_
{
  typedef ScanI2CBusResponse_<ContainerAllocator> Type;

  ScanI2CBusResponse_()
    : status(0)
    , message()
    , is_ok(false)
    , missing()
    , detected()  {
    }
  ScanI2CBusResponse_(const ContainerAllocator& _alloc)
    : status(0)
    , message(_alloc)
    , is_ok(false)
    , missing(_alloc)
    , detected(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef uint8_t _is_ok_type;
  _is_ok_type is_ok;

   typedef std::vector< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> >> _missing_type;
  _missing_type missing;

   typedef std::vector< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> >> _detected_type;
  _detected_type detected;





  typedef boost::shared_ptr< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ScanI2CBusResponse_

typedef ::niryo_robot_rpi::ScanI2CBusResponse_<std::allocator<void> > ScanI2CBusResponse;

typedef boost::shared_ptr< ::niryo_robot_rpi::ScanI2CBusResponse > ScanI2CBusResponsePtr;
typedef boost::shared_ptr< ::niryo_robot_rpi::ScanI2CBusResponse const> ScanI2CBusResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.message == rhs.message &&
    lhs.is_ok == rhs.is_ok &&
    lhs.missing == rhs.missing &&
    lhs.detected == rhs.detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_rpi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "808e467912d414dae099afb5994358c5";
  }

  static const char* value(const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x808e467912d414daULL;
  static const uint64_t static_value2 = 0xe099afb5994358c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/ScanI2CBusResponse";
  }

  static const char* value(const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 status\n"
"string message\n"
"\n"
"bool is_ok\n"
"niryo_robot_rpi/I2CComponent[] missing\n"
"niryo_robot_rpi/I2CComponent[] detected\n"
"\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_rpi/I2CComponent\n"
"uint32 bus\n"
"uint32 address\n"
"string info\n"
;
  }

  static const char* value(const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.message);
      stream.next(m.is_ok);
      stream.next(m.missing);
      stream.next(m.detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScanI2CBusResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_rpi::ScanI2CBusResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "is_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ok);
    s << indent << "missing[]" << std::endl;
    for (size_t i = 0; i < v.missing.size(); ++i)
    {
      s << indent << "  missing[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> >::stream(s, indent + "    ", v.missing[i]);
    }
    s << indent << "detected[]" << std::endl;
    for (size_t i = 0; i < v.detected.size(); ++i)
    {
      s << indent << "  detected[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_rpi::I2CComponent_<ContainerAllocator> >::stream(s, indent + "    ", v.detected[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_RPI_MESSAGE_SCANI2CBUSRESPONSE_H
