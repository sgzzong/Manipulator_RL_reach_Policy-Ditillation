// Generated by gencpp from file niryo_robot_rpi/SetIOModeRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_RPI_MESSAGE_SETIOMODEREQUEST_H
#define NIRYO_ROBOT_RPI_MESSAGE_SETIOMODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_rpi
{
template <class ContainerAllocator>
struct SetIOModeRequest_
{
  typedef SetIOModeRequest_<ContainerAllocator> Type;

  SetIOModeRequest_()
    : name()
    , mode(0)  {
    }
  SetIOModeRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int8_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OUTPUT)
  #undef OUTPUT
#endif
#if defined(_WIN32) && defined(INPUT)
  #undef INPUT
#endif

  enum {
    OUTPUT = 0,
    INPUT = 1,
  };


  typedef boost::shared_ptr< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetIOModeRequest_

typedef ::niryo_robot_rpi::SetIOModeRequest_<std::allocator<void> > SetIOModeRequest;

typedef boost::shared_ptr< ::niryo_robot_rpi::SetIOModeRequest > SetIOModeRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_rpi::SetIOModeRequest const> SetIOModeRequestConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_rpi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e038fc88a6abd691bca3338a4484ca0c";
  }

  static const char* value(const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe038fc88a6abd691ULL;
  static const uint64_t static_value2 = 0xbca3338a4484ca0cULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/SetIOModeRequest";
  }

  static const char* value(const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"\n"
"int8 OUTPUT = 0\n"
"int8 INPUT = 1\n"
"int8 mode\n"
"\n"
;
  }

  static const char* value(const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetIOModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_rpi::SetIOModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_RPI_MESSAGE_SETIOMODEREQUEST_H
