// Generated by gencpp from file niryo_robot_rpi/AnalogIOState.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_RPI_MESSAGE_ANALOGIOSTATE_H
#define NIRYO_ROBOT_RPI_MESSAGE_ANALOGIOSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_rpi/AnalogIO.h>
#include <niryo_robot_rpi/AnalogIO.h>

namespace niryo_robot_rpi
{
template <class ContainerAllocator>
struct AnalogIOState_
{
  typedef AnalogIOState_<ContainerAllocator> Type;

  AnalogIOState_()
    : analog_inputs()
    , analog_outputs()  {
    }
  AnalogIOState_(const ContainerAllocator& _alloc)
    : analog_inputs(_alloc)
    , analog_outputs(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> >> _analog_inputs_type;
  _analog_inputs_type analog_inputs;

   typedef std::vector< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> >> _analog_outputs_type;
  _analog_outputs_type analog_outputs;





  typedef boost::shared_ptr< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> const> ConstPtr;

}; // struct AnalogIOState_

typedef ::niryo_robot_rpi::AnalogIOState_<std::allocator<void> > AnalogIOState;

typedef boost::shared_ptr< ::niryo_robot_rpi::AnalogIOState > AnalogIOStatePtr;
typedef boost::shared_ptr< ::niryo_robot_rpi::AnalogIOState const> AnalogIOStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator2> & rhs)
{
  return lhs.analog_inputs == rhs.analog_inputs &&
    lhs.analog_outputs == rhs.analog_outputs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator1> & lhs, const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_rpi

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50830703d75ba2ea72eb263ee99782e6";
  }

  static const char* value(const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50830703d75ba2eaULL;
  static const uint64_t static_value2 = 0x72eb263ee99782e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/AnalogIOState";
  }

  static const char* value(const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_rpi/AnalogIO[] analog_inputs\n"
"niryo_robot_rpi/AnalogIO[] analog_outputs\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_rpi/AnalogIO\n"
"string name\n"
"float64 value\n"
"\n"
;
  }

  static const char* value(const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.analog_inputs);
      stream.next(m.analog_outputs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnalogIOState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_rpi::AnalogIOState_<ContainerAllocator>& v)
  {
    s << indent << "analog_inputs[]" << std::endl;
    for (size_t i = 0; i < v.analog_inputs.size(); ++i)
    {
      s << indent << "  analog_inputs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> >::stream(s, indent + "    ", v.analog_inputs[i]);
    }
    s << indent << "analog_outputs[]" << std::endl;
    for (size_t i = 0; i < v.analog_outputs.size(); ++i)
    {
      s << indent << "  analog_outputs[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::niryo_robot_rpi::AnalogIO_<ContainerAllocator> >::stream(s, indent + "    ", v.analog_outputs[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_RPI_MESSAGE_ANALOGIOSTATE_H
