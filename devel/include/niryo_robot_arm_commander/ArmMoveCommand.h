// Generated by gencpp from file niryo_robot_arm_commander/ArmMoveCommand.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ARMMOVECOMMAND_H
#define NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ARMMOVECOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <niryo_robot_msgs/RPY.h>
#include <geometry_msgs/Quaternion.h>
#include <niryo_robot_arm_commander/ShiftPose.h>
#include <geometry_msgs/Pose.h>
#include <trajectory_msgs/JointTrajectory.h>

namespace niryo_robot_arm_commander
{
template <class ContainerAllocator>
struct ArmMoveCommand_
{
  typedef ArmMoveCommand_<ContainerAllocator> Type;

  ArmMoveCommand_()
    : cmd_type(0)
    , joints()
    , position()
    , rpy()
    , orientation()
    , shift()
    , list_poses()
    , dist_smoothing(0.0)
    , trajectory()
    , args()  {
    }
  ArmMoveCommand_(const ContainerAllocator& _alloc)
    : cmd_type(0)
    , joints(_alloc)
    , position(_alloc)
    , rpy(_alloc)
    , orientation(_alloc)
    , shift(_alloc)
    , list_poses(_alloc)
    , dist_smoothing(0.0)
    , trajectory(_alloc)
    , args(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joints_type;
  _joints_type joints;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef  ::niryo_robot_msgs::RPY_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;

   typedef  ::niryo_robot_arm_commander::ShiftPose_<ContainerAllocator>  _shift_type;
  _shift_type shift;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _list_poses_type;
  _list_poses_type list_poses;

   typedef float _dist_smoothing_type;
  _dist_smoothing_type dist_smoothing;

   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _args_type;
  _args_type args;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(JOINTS)
  #undef JOINTS
#endif
#if defined(_WIN32) && defined(POSE)
  #undef POSE
#endif
#if defined(_WIN32) && defined(POSITION)
  #undef POSITION
#endif
#if defined(_WIN32) && defined(RPY)
  #undef RPY
#endif
#if defined(_WIN32) && defined(POSE_QUAT)
  #undef POSE_QUAT
#endif
#if defined(_WIN32) && defined(LINEAR_POSE)
  #undef LINEAR_POSE
#endif
#if defined(_WIN32) && defined(SHIFT_POSE)
  #undef SHIFT_POSE
#endif
#if defined(_WIN32) && defined(SHIFT_LINEAR_POSE)
  #undef SHIFT_LINEAR_POSE
#endif
#if defined(_WIN32) && defined(EXECUTE_TRAJ)
  #undef EXECUTE_TRAJ
#endif
#if defined(_WIN32) && defined(DRAW_SPIRAL)
  #undef DRAW_SPIRAL
#endif
#if defined(_WIN32) && defined(DRAW_CIRCLE)
  #undef DRAW_CIRCLE
#endif
#if defined(_WIN32) && defined(EXECUTE_FULL_TRAJ)
  #undef EXECUTE_FULL_TRAJ
#endif
#if defined(_WIN32) && defined(EXECUTE_RAW_TRAJ)
  #undef EXECUTE_RAW_TRAJ
#endif

  enum {
    JOINTS = 0,
    POSE = 1,
    POSITION = 2,
    RPY = 3,
    POSE_QUAT = 4,
    LINEAR_POSE = 5,
    SHIFT_POSE = 6,
    SHIFT_LINEAR_POSE = 7,
    EXECUTE_TRAJ = 8,
    DRAW_SPIRAL = 9,
    DRAW_CIRCLE = 10,
    EXECUTE_FULL_TRAJ = 11,
    EXECUTE_RAW_TRAJ = 12,
  };


  typedef boost::shared_ptr< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> const> ConstPtr;

}; // struct ArmMoveCommand_

typedef ::niryo_robot_arm_commander::ArmMoveCommand_<std::allocator<void> > ArmMoveCommand;

typedef boost::shared_ptr< ::niryo_robot_arm_commander::ArmMoveCommand > ArmMoveCommandPtr;
typedef boost::shared_ptr< ::niryo_robot_arm_commander::ArmMoveCommand const> ArmMoveCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator2> & rhs)
{
  return lhs.cmd_type == rhs.cmd_type &&
    lhs.joints == rhs.joints &&
    lhs.position == rhs.position &&
    lhs.rpy == rhs.rpy &&
    lhs.orientation == rhs.orientation &&
    lhs.shift == rhs.shift &&
    lhs.list_poses == rhs.list_poses &&
    lhs.dist_smoothing == rhs.dist_smoothing &&
    lhs.trajectory == rhs.trajectory &&
    lhs.args == rhs.args;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_arm_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63a3b03d75e1e8dce75aa338009e327c";
  }

  static const char* value(const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63a3b03d75e1e8dcULL;
  static const uint64_t static_value2 = 0xe75aa338009e327cULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_arm_commander/ArmMoveCommand";
  }

  static const char* value(const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 JOINTS = 0            # uses joints \n"
"int32 POSE = 1              # uses position and rpy \n"
"int32 POSITION = 2          # uses position\n"
"int32 RPY = 3               # uses rpy\n"
"int32 POSE_QUAT = 4         # uses position and orientation\n"
"int32 LINEAR_POSE = 5       # uses position and rpy\n"
"int32 SHIFT_POSE = 6        # uses shift\n"
"int32 SHIFT_LINEAR_POSE = 7 # uses shift\n"
"int32 EXECUTE_TRAJ = 8      # uses dist_smoothing, list_poses\n"
"int32 DRAW_SPIRAL = 9\n"
"int32 DRAW_CIRCLE = 10\n"
"int32 EXECUTE_FULL_TRAJ = 11\n"
"int32 EXECUTE_RAW_TRAJ = 12\n"
"\n"
"int32 cmd_type\n"
"\n"
"float64[] joints\n"
"geometry_msgs/Point position\n"
"niryo_robot_msgs/RPY rpy\n"
"geometry_msgs/Quaternion orientation\n"
"niryo_robot_arm_commander/ShiftPose shift\n"
"\n"
"geometry_msgs/Pose[] list_poses\n"
"float32 dist_smoothing\n"
"\n"
"trajectory_msgs/JointTrajectory trajectory\n"
"\n"
"float64[] args\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/RPY\n"
"# roll, pitch and yaw\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_arm_commander/ShiftPose\n"
"int32 axis_number\n"
"float64 value\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.joints);
      stream.next(m.position);
      stream.next(m.rpy);
      stream.next(m.orientation);
      stream.next(m.shift);
      stream.next(m.list_poses);
      stream.next(m.dist_smoothing);
      stream.next(m.trajectory);
      stream.next(m.args);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmMoveCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::niryo_robot_msgs::RPY_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "shift: ";
    s << std::endl;
    Printer< ::niryo_robot_arm_commander::ShiftPose_<ContainerAllocator> >::stream(s, indent + "  ", v.shift);
    s << indent << "list_poses[]" << std::endl;
    for (size_t i = 0; i < v.list_poses.size(); ++i)
    {
      s << indent << "  list_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.list_poses[i]);
    }
    s << indent << "dist_smoothing: ";
    Printer<float>::stream(s, indent + "  ", v.dist_smoothing);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "args[]" << std::endl;
    for (size_t i = 0; i < v.args.size(); ++i)
    {
      s << indent << "  args[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.args[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ARMMOVECOMMAND_H
