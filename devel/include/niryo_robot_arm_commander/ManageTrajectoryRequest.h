// Generated by gencpp from file niryo_robot_arm_commander/ManageTrajectoryRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_MANAGETRAJECTORYREQUEST_H
#define NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_MANAGETRAJECTORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <trajectory_msgs/JointTrajectory.h>

namespace niryo_robot_arm_commander
{
template <class ContainerAllocator>
struct ManageTrajectoryRequest_
{
  typedef ManageTrajectoryRequest_<ContainerAllocator> Type;

  ManageTrajectoryRequest_()
    : cmd(0)
    , name()
    , new_name()
    , description()
    , trajectory()  {
    }
  ManageTrajectoryRequest_(const ContainerAllocator& _alloc)
    : cmd(0)
    , name(_alloc)
    , new_name(_alloc)
    , description(_alloc)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type;
  _cmd_type cmd;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _new_name_type;
  _new_name_type new_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;

   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DELETE_ALL)
  #undef DELETE_ALL
#endif
#if defined(_WIN32) && defined(DELETE)
  #undef DELETE
#endif
#if defined(_WIN32) && defined(SAVE)
  #undef SAVE
#endif
#if defined(_WIN32) && defined(SAVE_LAST_LEARNED)
  #undef SAVE_LAST_LEARNED
#endif
#if defined(_WIN32) && defined(UPDATE)
  #undef UPDATE
#endif
#if defined(_WIN32) && defined(EXECUTE)
  #undef EXECUTE
#endif
#if defined(_WIN32) && defined(EXECUTE_REGISTERED)
  #undef EXECUTE_REGISTERED
#endif
#if defined(_WIN32) && defined(GO_TO_FIRST_POINT)
  #undef GO_TO_FIRST_POINT
#endif

  enum {
    DELETE_ALL = -2,
    DELETE = -1,
    SAVE = 1,
    SAVE_LAST_LEARNED = 2,
    UPDATE = 3,
    EXECUTE = 4,
    EXECUTE_REGISTERED = 5,
    GO_TO_FIRST_POINT = 6,
  };


  typedef boost::shared_ptr< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManageTrajectoryRequest_

typedef ::niryo_robot_arm_commander::ManageTrajectoryRequest_<std::allocator<void> > ManageTrajectoryRequest;

typedef boost::shared_ptr< ::niryo_robot_arm_commander::ManageTrajectoryRequest > ManageTrajectoryRequestPtr;
typedef boost::shared_ptr< ::niryo_robot_arm_commander::ManageTrajectoryRequest const> ManageTrajectoryRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd &&
    lhs.name == rhs.name &&
    lhs.new_name == rhs.new_name &&
    lhs.description == rhs.description &&
    lhs.trajectory == rhs.trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_arm_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71197e78d0b5543318a9500ed58e9077";
  }

  static const char* value(const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71197e78d0b55433ULL;
  static const uint64_t static_value2 = 0x18a9500ed58e9077ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_arm_commander/ManageTrajectoryRequest";
  }

  static const char* value(const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd\n"
"int32 DELETE_ALL = -2\n"
"int32 DELETE = -1\n"
"int32 SAVE = 1\n"
"int32 SAVE_LAST_LEARNED = 2\n"
"int32 UPDATE = 3\n"
"int32 EXECUTE = 4\n"
"int32 EXECUTE_REGISTERED = 5\n"
"int32 GO_TO_FIRST_POINT = 6\n"
"\n"
"string name\n"
"string new_name\n"
"string description\n"
"\n"
"trajectory_msgs/JointTrajectory trajectory\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
      stream.next(m.name);
      stream.next(m.new_name);
      stream.next(m.description);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManageTrajectoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_arm_commander::ManageTrajectoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "new_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.new_name);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_MANAGETRAJECTORYREQUEST_H
