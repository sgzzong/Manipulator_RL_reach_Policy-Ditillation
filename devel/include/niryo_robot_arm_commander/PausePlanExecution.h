// Generated by gencpp from file niryo_robot_arm_commander/PausePlanExecution.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_PAUSEPLANEXECUTION_H
#define NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_PAUSEPLANEXECUTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_robot_arm_commander
{
template <class ContainerAllocator>
struct PausePlanExecution_
{
  typedef PausePlanExecution_<ContainerAllocator> Type;

  PausePlanExecution_()
    : state(0)  {
    }
  PausePlanExecution_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef int8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STANDBY)
  #undef STANDBY
#endif
#if defined(_WIN32) && defined(PLAY)
  #undef PLAY
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(RESUME)
  #undef RESUME
#endif
#if defined(_WIN32) && defined(CANCEL)
  #undef CANCEL
#endif
#if defined(_WIN32) && defined(PAUSE_TIMEOUT)
  #undef PAUSE_TIMEOUT
#endif

  enum {
    STANDBY = 0,
    PLAY = 1,
    PAUSE = 2,
    RESUME = 3,
    CANCEL = 4,
  };

  static const double PAUSE_TIMEOUT;

  typedef boost::shared_ptr< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> const> ConstPtr;

}; // struct PausePlanExecution_

typedef ::niryo_robot_arm_commander::PausePlanExecution_<std::allocator<void> > PausePlanExecution;

typedef boost::shared_ptr< ::niryo_robot_arm_commander::PausePlanExecution > PausePlanExecutionPtr;
typedef boost::shared_ptr< ::niryo_robot_arm_commander::PausePlanExecution const> PausePlanExecutionConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   
   template<typename ContainerAllocator> const double
      PausePlanExecution_<ContainerAllocator>::PAUSE_TIMEOUT =
        
          30.0
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_arm_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f975633a84efe7236e13f4ac21d873f4";
  }

  static const char* value(const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf975633a84efe723ULL;
  static const uint64_t static_value2 = 0x6e13f4ac21d873f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_arm_commander/PausePlanExecution";
  }

  static const char* value(const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 STANDBY = 0\n"
"int8 PLAY = 1\n"
"int8 PAUSE = 2\n"
"int8 RESUME = 3\n"
"int8 CANCEL = 4\n"
"\n"
"float64 PAUSE_TIMEOUT = 30.0\n"
"\n"
"int8 state\n"
;
  }

  static const char* value(const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PausePlanExecution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_arm_commander::PausePlanExecution_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_PAUSEPLANEXECUTION_H
