// Generated by gencpp from file niryo_robot_arm_commander/RobotMoveGoal.msg
// DO NOT EDIT!


#ifndef NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ROBOTMOVEGOAL_H
#define NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ROBOTMOVEGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_robot_arm_commander/ArmMoveCommand.h>

namespace niryo_robot_arm_commander
{
template <class ContainerAllocator>
struct RobotMoveGoal_
{
  typedef RobotMoveGoal_<ContainerAllocator> Type;

  RobotMoveGoal_()
    : cmd()  {
    }
  RobotMoveGoal_(const ContainerAllocator& _alloc)
    : cmd(_alloc)  {
  (void)_alloc;
    }



   typedef  ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator>  _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> const> ConstPtr;

}; // struct RobotMoveGoal_

typedef ::niryo_robot_arm_commander::RobotMoveGoal_<std::allocator<void> > RobotMoveGoal;

typedef boost::shared_ptr< ::niryo_robot_arm_commander::RobotMoveGoal > RobotMoveGoalPtr;
typedef boost::shared_ptr< ::niryo_robot_arm_commander::RobotMoveGoal const> RobotMoveGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator2> & rhs)
{
  return lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator1> & lhs, const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace niryo_robot_arm_commander

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2d39b2971840f650e8ac87919a337d73";
  }

  static const char* value(const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2d39b2971840f650ULL;
  static const uint64_t static_value2 = 0xe8ac87919a337d73ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_robot_arm_commander/RobotMoveGoal";
  }

  static const char* value(const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# goal\n"
"niryo_robot_arm_commander/ArmMoveCommand cmd\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_arm_commander/ArmMoveCommand\n"
"int32 JOINTS = 0            # uses joints \n"
"int32 POSE = 1              # uses position and rpy \n"
"int32 POSITION = 2          # uses position\n"
"int32 RPY = 3               # uses rpy\n"
"int32 POSE_QUAT = 4         # uses position and orientation\n"
"int32 LINEAR_POSE = 5       # uses position and rpy\n"
"int32 SHIFT_POSE = 6        # uses shift\n"
"int32 SHIFT_LINEAR_POSE = 7 # uses shift\n"
"int32 EXECUTE_TRAJ = 8      # uses dist_smoothing, list_poses\n"
"int32 DRAW_SPIRAL = 9\n"
"int32 DRAW_CIRCLE = 10\n"
"int32 EXECUTE_FULL_TRAJ = 11\n"
"int32 EXECUTE_RAW_TRAJ = 12\n"
"\n"
"int32 cmd_type\n"
"\n"
"float64[] joints\n"
"geometry_msgs/Point position\n"
"niryo_robot_msgs/RPY rpy\n"
"geometry_msgs/Quaternion orientation\n"
"niryo_robot_arm_commander/ShiftPose shift\n"
"\n"
"geometry_msgs/Pose[] list_poses\n"
"float32 dist_smoothing\n"
"\n"
"trajectory_msgs/JointTrajectory trajectory\n"
"\n"
"float64[] args\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_msgs/RPY\n"
"# roll, pitch and yaw\n"
"\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: niryo_robot_arm_commander/ShiftPose\n"
"int32 axis_number\n"
"float64 value\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotMoveGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_robot_arm_commander::RobotMoveGoal_<ContainerAllocator>& v)
  {
    s << indent << "cmd: ";
    s << std::endl;
    Printer< ::niryo_robot_arm_commander::ArmMoveCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ROBOT_ARM_COMMANDER_MESSAGE_ROBOTMOVEGOAL_H
