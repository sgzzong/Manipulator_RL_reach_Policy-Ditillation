# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_poses_handlers/GetTargetPoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTargetPoseRequest(genpy.Message):
  _md5sum = "66dd79e6ec965fd249546ec36952c7f5"
  _type = "niryo_robot_poses_handlers/GetTargetPoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string workspace
float32 height_offset
float32 x_rel
float32 y_rel
float32 yaw_rel
"""
  __slots__ = ['workspace','height_offset','x_rel','y_rel','yaw_rel']
  _slot_types = ['string','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       workspace,height_offset,x_rel,y_rel,yaw_rel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTargetPoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.workspace is None:
        self.workspace = ''
      if self.height_offset is None:
        self.height_offset = 0.
      if self.x_rel is None:
        self.x_rel = 0.
      if self.y_rel is None:
        self.y_rel = 0.
      if self.yaw_rel is None:
        self.yaw_rel = 0.
    else:
      self.workspace = ''
      self.height_offset = 0.
      self.x_rel = 0.
      self.y_rel = 0.
      self.yaw_rel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.workspace
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workspace = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.workspace
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4f().pack(_x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workspace = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_poses_handlers/GetTargetPoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import niryo_robot_msgs.msg

class GetTargetPoseResponse(genpy.Message):
  _md5sum = "23d7739086dcafe0ad8609012bafc859"
  _type = "niryo_robot_poses_handlers/GetTargetPoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
string message
niryo_robot_msgs/RobotState target_pose


================================================================================
MSG: niryo_robot_msgs/RobotState
geometry_msgs/Point position
niryo_robot_msgs/RPY rpy
geometry_msgs/Quaternion orientation

geometry_msgs/Twist twist
float64 tcp_speed
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: niryo_robot_msgs/RPY
# roll, pitch and yaw

float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['status','message','target_pose']
  _slot_types = ['int32','string','niryo_robot_msgs/RobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,message,target_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTargetPoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.message is None:
        self.message = ''
      if self.target_pose is None:
        self.target_pose = niryo_robot_msgs.msg.RobotState()
    else:
      self.status = 0
      self.message = ''
      self.target_pose = niryo_robot_msgs.msg.RobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.target_pose.twist.linear.x, _x.target_pose.twist.linear.y, _x.target_pose.twist.linear.z, _x.target_pose.twist.angular.x, _x.target_pose.twist.angular.y, _x.target_pose.twist.angular.z, _x.target_pose.tcp_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_pose is None:
        self.target_pose = niryo_robot_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.target_pose.twist.linear.x, _x.target_pose.twist.linear.y, _x.target_pose.twist.linear.z, _x.target_pose.twist.angular.x, _x.target_pose.twist.angular.y, _x.target_pose.twist.angular.z, _x.target_pose.tcp_speed,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17d().pack(_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.target_pose.twist.linear.x, _x.target_pose.twist.linear.y, _x.target_pose.twist.linear.z, _x.target_pose.twist.angular.x, _x.target_pose.twist.angular.y, _x.target_pose.twist.angular.z, _x.target_pose.tcp_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_pose is None:
        self.target_pose = niryo_robot_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 136
      (_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw, _x.target_pose.orientation.x, _x.target_pose.orientation.y, _x.target_pose.orientation.z, _x.target_pose.orientation.w, _x.target_pose.twist.linear.x, _x.target_pose.twist.linear.y, _x.target_pose.twist.linear.z, _x.target_pose.twist.angular.x, _x.target_pose.twist.angular.y, _x.target_pose.twist.angular.z, _x.target_pose.tcp_speed,) = _get_struct_17d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17d = None
def _get_struct_17d():
    global _struct_17d
    if _struct_17d is None:
        _struct_17d = struct.Struct("<17d")
    return _struct_17d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class GetTargetPose(object):
  _type          = 'niryo_robot_poses_handlers/GetTargetPose'
  _md5sum = 'efcedb79813666c14f4931b17845a40d'
  _request_class  = GetTargetPoseRequest
  _response_class = GetTargetPoseResponse
