# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ttl_driver/MotorHardwareStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_robot_msgs.msg

class MotorHardwareStatus(genpy.Message):
  _md5sum = "d38a5d35efbee481425ca6e864f50fce"
  _type = "ttl_driver/MotorHardwareStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """niryo_robot_msgs/MotorHeader motor_identity

string firmware_version
uint32 temperature
float64 voltage
uint32 error
string error_msg

================================================================================
MSG: niryo_robot_msgs/MotorHeader
uint8 motor_id

uint8 motor_type
uint8 MOTOR_TYPE_STEPPER=1
uint8 MOTOR_TYPE_XL430=2
uint8 MOTOR_TYPE_XL320=3
uint8 MOTOR_TYPE_XL330=4
uint8 MOROR_TYPE_XC430=5
uint8 MOTOR_TYPE_END_EFFECTOR=10

"""
  __slots__ = ['motor_identity','firmware_version','temperature','voltage','error','error_msg']
  _slot_types = ['niryo_robot_msgs/MotorHeader','string','uint32','float64','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_identity,firmware_version,temperature,voltage,error,error_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorHardwareStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor_identity is None:
        self.motor_identity = niryo_robot_msgs.msg.MotorHeader()
      if self.firmware_version is None:
        self.firmware_version = ''
      if self.temperature is None:
        self.temperature = 0
      if self.voltage is None:
        self.voltage = 0.
      if self.error is None:
        self.error = 0
      if self.error_msg is None:
        self.error_msg = ''
    else:
      self.motor_identity = niryo_robot_msgs.msg.MotorHeader()
      self.firmware_version = ''
      self.temperature = 0
      self.voltage = 0.
      self.error = 0
      self.error_msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.motor_identity.motor_id, _x.motor_identity.motor_type))
      _x = self.firmware_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IdI().pack(_x.temperature, _x.voltage, _x.error))
      _x = self.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_identity is None:
        self.motor_identity = niryo_robot_msgs.msg.MotorHeader()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.motor_identity.motor_id, _x.motor_identity.motor_type,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmware_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firmware_version = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temperature, _x.voltage, _x.error,) = _get_struct_IdI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.motor_identity.motor_id, _x.motor_identity.motor_type))
      _x = self.firmware_version
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_IdI().pack(_x.temperature, _x.voltage, _x.error))
      _x = self.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.motor_identity is None:
        self.motor_identity = niryo_robot_msgs.msg.MotorHeader()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.motor_identity.motor_id, _x.motor_identity.motor_type,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.firmware_version = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.firmware_version = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.temperature, _x.voltage, _x.error,) = _get_struct_IdI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.error_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_IdI = None
def _get_struct_IdI():
    global _struct_IdI
    if _struct_IdI is None:
        _struct_IdI = struct.Struct("<IdI")
    return _struct_IdI
