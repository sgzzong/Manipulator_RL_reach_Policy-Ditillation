# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ttl_driver/WritePIDValueRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WritePIDValueRequest(genpy.Message):
  _md5sum = "72133310c8095b1fd7ac5be8d1b09825"
  _type = "ttl_driver/WritePIDValueRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Check XL-XXX motors reference doc for
# the complete register table

uint8 id
uint16 pos_p_gain
uint16 pos_i_gain
uint16 pos_d_gain

uint16 vel_p_gain
uint16 vel_i_gain

uint16 ff1_gain
uint16 ff2_gain

# vel and acc profile for dxl
uint32 vel_profile
uint32 acc_profile
"""
  __slots__ = ['id','pos_p_gain','pos_i_gain','pos_d_gain','vel_p_gain','vel_i_gain','ff1_gain','ff2_gain','vel_profile','acc_profile']
  _slot_types = ['uint8','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint32','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,pos_p_gain,pos_i_gain,pos_d_gain,vel_p_gain,vel_i_gain,ff1_gain,ff2_gain,vel_profile,acc_profile

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WritePIDValueRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.pos_p_gain is None:
        self.pos_p_gain = 0
      if self.pos_i_gain is None:
        self.pos_i_gain = 0
      if self.pos_d_gain is None:
        self.pos_d_gain = 0
      if self.vel_p_gain is None:
        self.vel_p_gain = 0
      if self.vel_i_gain is None:
        self.vel_i_gain = 0
      if self.ff1_gain is None:
        self.ff1_gain = 0
      if self.ff2_gain is None:
        self.ff2_gain = 0
      if self.vel_profile is None:
        self.vel_profile = 0
      if self.acc_profile is None:
        self.acc_profile = 0
    else:
      self.id = 0
      self.pos_p_gain = 0
      self.pos_i_gain = 0
      self.pos_d_gain = 0
      self.vel_p_gain = 0
      self.vel_i_gain = 0
      self.ff1_gain = 0
      self.ff2_gain = 0
      self.vel_profile = 0
      self.acc_profile = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B7H2I().pack(_x.id, _x.pos_p_gain, _x.pos_i_gain, _x.pos_d_gain, _x.vel_p_gain, _x.vel_i_gain, _x.ff1_gain, _x.ff2_gain, _x.vel_profile, _x.acc_profile))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.id, _x.pos_p_gain, _x.pos_i_gain, _x.pos_d_gain, _x.vel_p_gain, _x.vel_i_gain, _x.ff1_gain, _x.ff2_gain, _x.vel_profile, _x.acc_profile,) = _get_struct_B7H2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B7H2I().pack(_x.id, _x.pos_p_gain, _x.pos_i_gain, _x.pos_d_gain, _x.vel_p_gain, _x.vel_i_gain, _x.ff1_gain, _x.ff2_gain, _x.vel_profile, _x.acc_profile))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.id, _x.pos_p_gain, _x.pos_i_gain, _x.pos_d_gain, _x.vel_p_gain, _x.vel_i_gain, _x.ff1_gain, _x.ff2_gain, _x.vel_profile, _x.acc_profile,) = _get_struct_B7H2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B7H2I = None
def _get_struct_B7H2I():
    global _struct_B7H2I
    if _struct_B7H2I is None:
        _struct_B7H2I = struct.Struct("<B7H2I")
    return _struct_B7H2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ttl_driver/WritePIDValueResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class WritePIDValueResponse(genpy.Message):
  _md5sum = "2c1d00fb8b4e78420f43d93d5292a429"
  _type = "ttl_driver/WritePIDValueResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
string message

"""
  __slots__ = ['status','message']
  _slot_types = ['int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,message

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WritePIDValueResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.message is None:
        self.message = ''
    else:
      self.status = 0
      self.message = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class WritePIDValue(object):
  _type          = 'ttl_driver/WritePIDValue'
  _md5sum = '017cd3b317df9961b6cf57aa9e1a9f80'
  _request_class  = WritePIDValueRequest
  _response_class = WritePIDValueResponse
