# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_tools_commander/ToolCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ToolCommand(genpy.Message):
  _md5sum = "e9d67503aca2a9d01b00faeb26e2fad7"
  _type = "niryo_robot_tools_commander/ToolCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Gripper
int8 OPEN_GRIPPER = 1
int8 CLOSE_GRIPPER = 2

# Vacuump pump
int8 PULL_AIR_VACUUM_PUMP = 10
int8 PUSH_AIR_VACUUM_PUMP = 11

# Tools controlled by digital I/Os
int8 SETUP_DIGITAL_IO = 20
int8 ACTIVATE_DIGITAL_IO = 21
int8 DEACTIVATE_DIGITAL_IO = 22

uint8 cmd_type

# Gripper1= 11, Gripper2=12, Gripper3=13, VaccuumPump=31, Electromagnet=30
int8 tool_id

# if gripper Ned1/One
uint16 speed

# if gripper Ned2
uint8 max_torque_percentage
uint8 hold_torque_percentage

# if vacuum pump or electromagnet grove
bool activate

# if tool is set by digital outputs (electromagnet)
string gpio
"""
  # Pseudo-constants
  OPEN_GRIPPER = 1
  CLOSE_GRIPPER = 2
  PULL_AIR_VACUUM_PUMP = 10
  PUSH_AIR_VACUUM_PUMP = 11
  SETUP_DIGITAL_IO = 20
  ACTIVATE_DIGITAL_IO = 21
  DEACTIVATE_DIGITAL_IO = 22

  __slots__ = ['cmd_type','tool_id','speed','max_torque_percentage','hold_torque_percentage','activate','gpio']
  _slot_types = ['uint8','int8','uint16','uint8','uint8','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_type,tool_id,speed,max_torque_percentage,hold_torque_percentage,activate,gpio

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToolCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_type is None:
        self.cmd_type = 0
      if self.tool_id is None:
        self.tool_id = 0
      if self.speed is None:
        self.speed = 0
      if self.max_torque_percentage is None:
        self.max_torque_percentage = 0
      if self.hold_torque_percentage is None:
        self.hold_torque_percentage = 0
      if self.activate is None:
        self.activate = False
      if self.gpio is None:
        self.gpio = ''
    else:
      self.cmd_type = 0
      self.tool_id = 0
      self.speed = 0
      self.max_torque_percentage = 0
      self.hold_torque_percentage = 0
      self.activate = False
      self.gpio = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BbH3B().pack(_x.cmd_type, _x.tool_id, _x.speed, _x.max_torque_percentage, _x.hold_torque_percentage, _x.activate))
      _x = self.gpio
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.cmd_type, _x.tool_id, _x.speed, _x.max_torque_percentage, _x.hold_torque_percentage, _x.activate,) = _get_struct_BbH3B().unpack(str[start:end])
      self.activate = bool(self.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gpio = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gpio = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BbH3B().pack(_x.cmd_type, _x.tool_id, _x.speed, _x.max_torque_percentage, _x.hold_torque_percentage, _x.activate))
      _x = self.gpio
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.cmd_type, _x.tool_id, _x.speed, _x.max_torque_percentage, _x.hold_torque_percentage, _x.activate,) = _get_struct_BbH3B().unpack(str[start:end])
      self.activate = bool(self.activate)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.gpio = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.gpio = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BbH3B = None
def _get_struct_BbH3B():
    global _struct_BbH3B
    if _struct_BbH3B is None:
        _struct_BbH3B = struct.Struct("<BbH3B")
    return _struct_BbH3B
