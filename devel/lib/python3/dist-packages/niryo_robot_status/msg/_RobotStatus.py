# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_status/RobotStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotStatus(genpy.Message):
  _md5sum = "348f86f9a8f05f5136ecc49809ffebf2"
  _type = "niryo_robot_status/RobotStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 UPDATE=-7
int8 REBOOT=-6
int8 SHUTDOWN=-5
int8 FATAL_ERROR=-4     # Node crash
int8 MOTOR_ERROR=-3     # Electrical/overload or disconnected motor error
int8 COLLISION=-2
int8 USER_PROGRAM_ERROR=-1
int8 UNKNOWN=0
int8 BOOTING=1          # Robot is booting
int8 REBOOT_MOTOR=2
int8 CALIBRATION_NEEDED=3
int8 CALIBRATION_IN_PROGRESS=4
int8 LEARNING_MODE=5
int8 STANDBY=6          # Torque ON
int8 MOVING=7           # Moving with NiryoStudio interface or ros topics without user program
int8 RUNNING_AUTONOMOUS=8   # User program is running
int8 RUNNING_DEBUG=9    # Debug program is running
int8 PAUSE=10           # User program paused
int8 LEARNING_MODE_AUTONOMOUS=11    # User program is running + Learning mode activated
int8 LEARNING_TRAJECTORY = 12
int8 REBOOT_MOTOR=13

int8 robot_status
string robot_status_str
string robot_message

int8 FATAL=-3
int8 ERROR=-2
int8 WARN=-1
int8 NONE=0

int8 logs_status
string logs_status_str
string logs_message

bool out_of_bounds
bool rpi_overheating"""
  # Pseudo-constants
  UPDATE = -7
  REBOOT = -6
  SHUTDOWN = -5
  FATAL_ERROR = -4
  MOTOR_ERROR = -3
  COLLISION = -2
  USER_PROGRAM_ERROR = -1
  UNKNOWN = 0
  BOOTING = 1
  REBOOT_MOTOR = 2
  CALIBRATION_NEEDED = 3
  CALIBRATION_IN_PROGRESS = 4
  LEARNING_MODE = 5
  STANDBY = 6
  MOVING = 7
  RUNNING_AUTONOMOUS = 8
  RUNNING_DEBUG = 9
  PAUSE = 10
  LEARNING_MODE_AUTONOMOUS = 11
  LEARNING_TRAJECTORY = 12
  REBOOT_MOTOR = 13
  FATAL = -3
  ERROR = -2
  WARN = -1
  NONE = 0

  __slots__ = ['robot_status','robot_status_str','robot_message','logs_status','logs_status_str','logs_message','out_of_bounds','rpi_overheating']
  _slot_types = ['int8','string','string','int8','string','string','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_status,robot_status_str,robot_message,logs_status,logs_status_str,logs_message,out_of_bounds,rpi_overheating

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_status is None:
        self.robot_status = 0
      if self.robot_status_str is None:
        self.robot_status_str = ''
      if self.robot_message is None:
        self.robot_message = ''
      if self.logs_status is None:
        self.logs_status = 0
      if self.logs_status_str is None:
        self.logs_status_str = ''
      if self.logs_message is None:
        self.logs_message = ''
      if self.out_of_bounds is None:
        self.out_of_bounds = False
      if self.rpi_overheating is None:
        self.rpi_overheating = False
    else:
      self.robot_status = 0
      self.robot_status_str = ''
      self.robot_message = ''
      self.logs_status = 0
      self.logs_status_str = ''
      self.logs_message = ''
      self.out_of_bounds = False
      self.rpi_overheating = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.robot_status
      buff.write(_get_struct_b().pack(_x))
      _x = self.robot_status_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.logs_status
      buff.write(_get_struct_b().pack(_x))
      _x = self.logs_status_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.logs_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.out_of_bounds, _x.rpi_overheating))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.robot_status,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_status_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_status_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_message = str[start:end]
      start = end
      end += 1
      (self.logs_status,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logs_status_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.logs_status_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logs_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.logs_message = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.out_of_bounds, _x.rpi_overheating,) = _get_struct_2B().unpack(str[start:end])
      self.out_of_bounds = bool(self.out_of_bounds)
      self.rpi_overheating = bool(self.rpi_overheating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.robot_status
      buff.write(_get_struct_b().pack(_x))
      _x = self.robot_status_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.logs_status
      buff.write(_get_struct_b().pack(_x))
      _x = self.logs_status_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.logs_message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.out_of_bounds, _x.rpi_overheating))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.robot_status,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_status_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_status_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_message = str[start:end]
      start = end
      end += 1
      (self.logs_status,) = _get_struct_b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logs_status_str = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.logs_status_str = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.logs_message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.logs_message = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.out_of_bounds, _x.rpi_overheating,) = _get_struct_2B().unpack(str[start:end])
      self.out_of_bounds = bool(self.out_of_bounds)
      self.rpi_overheating = bool(self.rpi_overheating)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
