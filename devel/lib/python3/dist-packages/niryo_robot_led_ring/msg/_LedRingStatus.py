# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_led_ring/LedRingStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_robot_led_ring.msg
import std_msgs.msg

class LedRingStatus(genpy.Message):
  _md5sum = "8451a2850ab998f7e23e7fb04868d7d0"
  _type = "niryo_robot_led_ring/LedRingStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 ROBOT_STATUS = 1
int32 USER = 2

int32 led_mode

niryo_robot_led_ring/LedRingAnimation animation_mode

std_msgs/ColorRGBA animation_color # except for rainbow related animation

================================================================================
MSG: niryo_robot_led_ring/LedRingAnimation
int32 NONE = -1
int32 SOLID = 1
int32 FLASHING = 2   
int32 ALTERNATE = 3  
int32 CHASE = 4       
int32 COLOR_WIPE = 5   
int32 RAINBOW = 6
int32 RAINBOW_CYLE = 7
int32 RAINBOW_CHASE = 8
int32 GO_UP = 9
int32 GO_UP_AND_DOWN = 10
int32 BREATH = 11
int32 SNAKE = 12
int32 CUSTOM = 13

int32 animation
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  # Pseudo-constants
  ROBOT_STATUS = 1
  USER = 2

  __slots__ = ['led_mode','animation_mode','animation_color']
  _slot_types = ['int32','niryo_robot_led_ring/LedRingAnimation','std_msgs/ColorRGBA']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       led_mode,animation_mode,animation_color

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LedRingStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.led_mode is None:
        self.led_mode = 0
      if self.animation_mode is None:
        self.animation_mode = niryo_robot_led_ring.msg.LedRingAnimation()
      if self.animation_color is None:
        self.animation_color = std_msgs.msg.ColorRGBA()
    else:
      self.led_mode = 0
      self.animation_mode = niryo_robot_led_ring.msg.LedRingAnimation()
      self.animation_color = std_msgs.msg.ColorRGBA()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i4f().pack(_x.led_mode, _x.animation_mode.animation, _x.animation_color.r, _x.animation_color.g, _x.animation_color.b, _x.animation_color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.animation_mode is None:
        self.animation_mode = niryo_robot_led_ring.msg.LedRingAnimation()
      if self.animation_color is None:
        self.animation_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.led_mode, _x.animation_mode.animation, _x.animation_color.r, _x.animation_color.g, _x.animation_color.b, _x.animation_color.a,) = _get_struct_2i4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i4f().pack(_x.led_mode, _x.animation_mode.animation, _x.animation_color.r, _x.animation_color.g, _x.animation_color.b, _x.animation_color.a))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.animation_mode is None:
        self.animation_mode = niryo_robot_led_ring.msg.LedRingAnimation()
      if self.animation_color is None:
        self.animation_color = std_msgs.msg.ColorRGBA()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.led_mode, _x.animation_mode.animation, _x.animation_color.r, _x.animation_color.g, _x.animation_color.b, _x.animation_color.a,) = _get_struct_2i4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4f = None
def _get_struct_2i4f():
    global _struct_2i4f
    if _struct_2i4f is None:
        _struct_2i4f = struct.Struct("<2i4f")
    return _struct_2i4f
