# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_programs_manager/ProgramIsRunning.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ProgramIsRunning(genpy.Message):
  _md5sum = "66c2fadf0a0e8cb9f5b6407bff6f9fb1"
  _type = "niryo_robot_programs_manager/ProgramIsRunning"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool program_is_running

int8 EXECUTION_ERROR = -2
int8 FILE_ERROR = -1
int8 NONE = 0
int8 PREEMPTED = 1
int8 SUCCESS = 2

int8 last_execution_status
string last_execution_msg"""
  # Pseudo-constants
  EXECUTION_ERROR = -2
  FILE_ERROR = -1
  NONE = 0
  PREEMPTED = 1
  SUCCESS = 2

  __slots__ = ['program_is_running','last_execution_status','last_execution_msg']
  _slot_types = ['bool','int8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       program_is_running,last_execution_status,last_execution_msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProgramIsRunning, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.program_is_running is None:
        self.program_is_running = False
      if self.last_execution_status is None:
        self.last_execution_status = 0
      if self.last_execution_msg is None:
        self.last_execution_msg = ''
    else:
      self.program_is_running = False
      self.last_execution_status = 0
      self.last_execution_msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.program_is_running, _x.last_execution_status))
      _x = self.last_execution_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.program_is_running, _x.last_execution_status,) = _get_struct_Bb().unpack(str[start:end])
      self.program_is_running = bool(self.program_is_running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_execution_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.last_execution_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bb().pack(_x.program_is_running, _x.last_execution_status))
      _x = self.last_execution_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.program_is_running, _x.last_execution_status,) = _get_struct_Bb().unpack(str[start:end])
      self.program_is_running = bool(self.program_is_running)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.last_execution_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.last_execution_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Bb = None
def _get_struct_Bb():
    global _struct_Bb
    if _struct_Bb is None:
        _struct_Bb = struct.Struct("<Bb")
    return _struct_Bb
