# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_programs_manager/GetProgramListRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_robot_programs_manager.msg

class GetProgramListRequest(genpy.Message):
  _md5sum = "e5e97d3a53eb75daa8a9dc33fecbe922"
  _type = "niryo_robot_programs_manager/GetProgramListRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """niryo_robot_programs_manager/ProgramLanguage language

================================================================================
MSG: niryo_robot_programs_manager/ProgramLanguage
int8 NONE = -1

int8 ALL = 0

# Runnable
int8 PYTHON2 = 1
int8 PYTHON3 = 2

# Not Runnable
int8 BLOCKLY = 66

int8 used
"""
  __slots__ = ['language']
  _slot_types = ['niryo_robot_programs_manager/ProgramLanguage']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       language

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetProgramListRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.language is None:
        self.language = niryo_robot_programs_manager.msg.ProgramLanguage()
    else:
      self.language = niryo_robot_programs_manager.msg.ProgramLanguage()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.language.used
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.language is None:
        self.language = niryo_robot_programs_manager.msg.ProgramLanguage()
      end = 0
      start = end
      end += 1
      (self.language.used,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.language.used
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.language is None:
        self.language = niryo_robot_programs_manager.msg.ProgramLanguage()
      end = 0
      start = end
      end += 1
      (self.language.used,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_programs_manager/GetProgramListResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_robot_programs_manager.msg

class GetProgramListResponse(genpy.Message):
  _md5sum = "2eeab6a7fdb2c21404eeccc7eb573f85"
  _type = "niryo_robot_programs_manager/GetProgramListResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string[] programs_names
niryo_robot_programs_manager/ProgramLanguageList[] list_of_language_list
string[] programs_description



================================================================================
MSG: niryo_robot_programs_manager/ProgramLanguageList
niryo_robot_programs_manager/ProgramLanguage[] language_list

================================================================================
MSG: niryo_robot_programs_manager/ProgramLanguage
int8 NONE = -1

int8 ALL = 0

# Runnable
int8 PYTHON2 = 1
int8 PYTHON3 = 2

# Not Runnable
int8 BLOCKLY = 66

int8 used
"""
  __slots__ = ['programs_names','list_of_language_list','programs_description']
  _slot_types = ['string[]','niryo_robot_programs_manager/ProgramLanguageList[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       programs_names,list_of_language_list,programs_description

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetProgramListResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.programs_names is None:
        self.programs_names = []
      if self.list_of_language_list is None:
        self.list_of_language_list = []
      if self.programs_description is None:
        self.programs_description = []
    else:
      self.programs_names = []
      self.list_of_language_list = []
      self.programs_description = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.programs_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.programs_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.list_of_language_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list_of_language_list:
        length = len(val1.language_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.language_list:
          _x = val2.used
          buff.write(_get_struct_b().pack(_x))
      length = len(self.programs_description)
      buff.write(_struct_I.pack(length))
      for val1 in self.programs_description:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.list_of_language_list is None:
        self.list_of_language_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.programs_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.programs_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list_of_language_list = []
      for i in range(0, length):
        val1 = niryo_robot_programs_manager.msg.ProgramLanguageList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.language_list = []
        for i in range(0, length):
          val2 = niryo_robot_programs_manager.msg.ProgramLanguage()
          start = end
          end += 1
          (val2.used,) = _get_struct_b().unpack(str[start:end])
          val1.language_list.append(val2)
        self.list_of_language_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.programs_description = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.programs_description.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.programs_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.programs_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.list_of_language_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.list_of_language_list:
        length = len(val1.language_list)
        buff.write(_struct_I.pack(length))
        for val2 in val1.language_list:
          _x = val2.used
          buff.write(_get_struct_b().pack(_x))
      length = len(self.programs_description)
      buff.write(_struct_I.pack(length))
      for val1 in self.programs_description:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.list_of_language_list is None:
        self.list_of_language_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.programs_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.programs_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.list_of_language_list = []
      for i in range(0, length):
        val1 = niryo_robot_programs_manager.msg.ProgramLanguageList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.language_list = []
        for i in range(0, length):
          val2 = niryo_robot_programs_manager.msg.ProgramLanguage()
          start = end
          end += 1
          (val2.used,) = _get_struct_b().unpack(str[start:end])
          val1.language_list.append(val2)
        self.list_of_language_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.programs_description = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.programs_description.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class GetProgramList(object):
  _type          = 'niryo_robot_programs_manager/GetProgramList'
  _md5sum = '4dfd49d0b1eeafdb4a0d480996fbd9b9'
  _request_class  = GetProgramListRequest
  _response_class = GetProgramListResponse
