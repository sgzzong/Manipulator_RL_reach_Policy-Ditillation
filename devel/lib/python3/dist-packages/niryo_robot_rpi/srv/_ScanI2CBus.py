# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_rpi/ScanI2CBusRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ScanI2CBusRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "niryo_robot_rpi/ScanI2CBusRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScanI2CBusRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_robot_rpi/ScanI2CBusResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_robot_rpi.msg

class ScanI2CBusResponse(genpy.Message):
  _md5sum = "808e467912d414dae099afb5994358c5"
  _type = "niryo_robot_rpi/ScanI2CBusResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
string message

bool is_ok
niryo_robot_rpi/I2CComponent[] missing
niryo_robot_rpi/I2CComponent[] detected


================================================================================
MSG: niryo_robot_rpi/I2CComponent
uint32 bus
uint32 address
string info"""
  __slots__ = ['status','message','is_ok','missing','detected']
  _slot_types = ['int32','string','bool','niryo_robot_rpi/I2CComponent[]','niryo_robot_rpi/I2CComponent[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,message,is_ok,missing,detected

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ScanI2CBusResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.message is None:
        self.message = ''
      if self.is_ok is None:
        self.is_ok = False
      if self.missing is None:
        self.missing = []
      if self.detected is None:
        self.detected = []
    else:
      self.status = 0
      self.message = ''
      self.is_ok = False
      self.missing = []
      self.detected = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_ok
      buff.write(_get_struct_B().pack(_x))
      length = len(self.missing)
      buff.write(_struct_I.pack(length))
      for val1 in self.missing:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.bus, _x.address))
        _x = val1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.detected)
      buff.write(_struct_I.pack(length))
      for val1 in self.detected:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.bus, _x.address))
        _x = val1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.missing is None:
        self.missing = None
      if self.detected is None:
        self.detected = None
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 1
      (self.is_ok,) = _get_struct_B().unpack(str[start:end])
      self.is_ok = bool(self.is_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.missing = []
      for i in range(0, length):
        val1 = niryo_robot_rpi.msg.I2CComponent()
        _x = val1
        start = end
        end += 8
        (_x.bus, _x.address,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.info = str[start:end]
        self.missing.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detected = []
      for i in range(0, length):
        val1 = niryo_robot_rpi.msg.I2CComponent()
        _x = val1
        start = end
        end += 8
        (_x.bus, _x.address,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.info = str[start:end]
        self.detected.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.is_ok
      buff.write(_get_struct_B().pack(_x))
      length = len(self.missing)
      buff.write(_struct_I.pack(length))
      for val1 in self.missing:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.bus, _x.address))
        _x = val1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.detected)
      buff.write(_struct_I.pack(length))
      for val1 in self.detected:
        _x = val1
        buff.write(_get_struct_2I().pack(_x.bus, _x.address))
        _x = val1.info
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.missing is None:
        self.missing = None
      if self.detected is None:
        self.detected = None
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 1
      (self.is_ok,) = _get_struct_B().unpack(str[start:end])
      self.is_ok = bool(self.is_ok)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.missing = []
      for i in range(0, length):
        val1 = niryo_robot_rpi.msg.I2CComponent()
        _x = val1
        start = end
        end += 8
        (_x.bus, _x.address,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.info = str[start:end]
        self.missing.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detected = []
      for i in range(0, length):
        val1 = niryo_robot_rpi.msg.I2CComponent()
        _x = val1
        start = end
        end += 8
        (_x.bus, _x.address,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.info = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.info = str[start:end]
        self.detected.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class ScanI2CBus(object):
  _type          = 'niryo_robot_rpi/ScanI2CBus'
  _md5sum = '808e467912d414dae099afb5994358c5'
  _request_class  = ScanI2CBusRequest
  _response_class = ScanI2CBusResponse
