// Auto-generated. Do not edit!

// (in-package niryo_robot_arm_commander.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let ArmMoveCommand = require('./ArmMoveCommand.js');

//-----------------------------------------------------------

class RobotMoveGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.cmd = null;
    }
    else {
      if (initObj.hasOwnProperty('cmd')) {
        this.cmd = initObj.cmd
      }
      else {
        this.cmd = new ArmMoveCommand();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RobotMoveGoal
    // Serialize message field [cmd]
    bufferOffset = ArmMoveCommand.serialize(obj.cmd, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RobotMoveGoal
    let len;
    let data = new RobotMoveGoal(null);
    // Deserialize message field [cmd]
    data.cmd = ArmMoveCommand.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += ArmMoveCommand.getMessageSize(object.cmd);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'niryo_robot_arm_commander/RobotMoveGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2d39b2971840f650e8ac87919a337d73';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # goal
    niryo_robot_arm_commander/ArmMoveCommand cmd
    
    ================================================================================
    MSG: niryo_robot_arm_commander/ArmMoveCommand
    int32 JOINTS = 0            # uses joints 
    int32 POSE = 1              # uses position and rpy 
    int32 POSITION = 2          # uses position
    int32 RPY = 3               # uses rpy
    int32 POSE_QUAT = 4         # uses position and orientation
    int32 LINEAR_POSE = 5       # uses position and rpy
    int32 SHIFT_POSE = 6        # uses shift
    int32 SHIFT_LINEAR_POSE = 7 # uses shift
    int32 EXECUTE_TRAJ = 8      # uses dist_smoothing, list_poses
    int32 DRAW_SPIRAL = 9
    int32 DRAW_CIRCLE = 10
    int32 EXECUTE_FULL_TRAJ = 11
    int32 EXECUTE_RAW_TRAJ = 12
    
    int32 cmd_type
    
    float64[] joints
    geometry_msgs/Point position
    niryo_robot_msgs/RPY rpy
    geometry_msgs/Quaternion orientation
    niryo_robot_arm_commander/ShiftPose shift
    
    geometry_msgs/Pose[] list_poses
    float32 dist_smoothing
    
    trajectory_msgs/JointTrajectory trajectory
    
    float64[] args
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: niryo_robot_msgs/RPY
    # roll, pitch and yaw
    
    float64 roll
    float64 pitch
    float64 yaw
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: niryo_robot_arm_commander/ShiftPose
    int32 axis_number
    float64 value
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: trajectory_msgs/JointTrajectory
    Header header
    string[] joint_names
    JointTrajectoryPoint[] points
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: trajectory_msgs/JointTrajectoryPoint
    # Each trajectory point specifies either positions[, velocities[, accelerations]]
    # or positions[, effort] for the trajectory to be executed.
    # All specified values are in the same order as the joint names in JointTrajectory.msg
    
    float64[] positions
    float64[] velocities
    float64[] accelerations
    float64[] effort
    duration time_from_start
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RobotMoveGoal(null);
    if (msg.cmd !== undefined) {
      resolved.cmd = ArmMoveCommand.Resolve(msg.cmd)
    }
    else {
      resolved.cmd = new ArmMoveCommand()
    }

    return resolved;
    }
};

module.exports = RobotMoveGoal;
